/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin on the JVM.
    id 'org.jetbrains.kotlin.jvm' version '1.3.20'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testCompile group: 'junit', name: 'junit', version: '4.12'
//COROUTINE
    compile group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core-common', version: '1.1.0'
    compile group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: '1.1.0'
//ARDUINO
    // https://mvnrepository.com/artifact/org.scream3r/jssc
    compile group: 'org.scream3r', name: 'jssc', version: '2.8.0'

//CUSTOM
    //compile fileTree(dir: 'C:/MyData/Magistrale/Ing.del.soft/GeneralLibs', include: 'uniboInterfaces.jar')
   // compile fileTree(dir: 'C:/MyData/Magistrale/Ing.del.soft/GeneralLibs', include: '2p301.jar')
   // compile fileTree(dir: 'C:/MyData/Magistrale/Ing.del.soft/GeneralLibs', include: 'it.unibo.bls19Local-1.0.jar')
    //For p2p two-way connections (TCP, UDP, BTH, Serial ...)
  //  compile fileTree(dir: 'C:/MyData/Magistrale/Ing.del.soft/GeneralLibs', include: 'unibonoawtsupports.jar')

    compile fileTree(include: ['*.jar'], dir: 'lib')

}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}


// Define the main class for the application.
mainClassName = 'RaspberryKActor.AppKt'
version = '1.0'
task fatJar(type: Jar) {
    manifest{
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
