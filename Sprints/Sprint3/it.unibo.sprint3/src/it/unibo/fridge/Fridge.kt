/* Generated by AN DISI Unibo */ 
package it.unibo.fridge

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fridge ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
					var food1 = 10
					var food2 = 20
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Fridge Started")
						itunibo.coap.modelFridgeResourceCoap.create(myself ,"fridge" )
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="takingFood",cond=whenEvent("takeFood"))
				}	 
				state("takingFood") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("takeFood(X)"), Term.createTerm("takeFood(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								var X = payloadArg(0).toInt()
								if(X == 1){ food1 = food1 - 1
								 }
								else
								 { food2 = food2 - 1
								  }
						}
					}
					 transition( edgeName="goto",targetState="updateModelFridge", cond=doswitch() )
				}	 
				state("updateModelFridge") { //this:State
					action { //it:State
						itunibo.robot.resourceFridgeModelSupport.updateRobotModel(myself ,"FOOD 1: $food1; FOOD 2: $food2" )
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
