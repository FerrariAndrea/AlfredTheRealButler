/* Generated by AN DISI Unibo */ 
package it.unibo.explorer

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Explorer ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			var stepCounter = 0 
			var Move = ""
			var StepTime   = 350L	//for virtual
			var RotateTime = 300L	//for virtual
			var PauseTime  = 250L 
			var Direction = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Actor: Explorer; State: initial")
						solve("consult('moves.pl')","") //set resVar	
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.plannerUtil.showMap(  )
					}
					 transition( edgeName="goto",targetState="ready", cond=doswitch() )
				}	 
				state("ready") { //this:State
					action { //it:State
						println("Actor: Explorer; State: ready")
					}
					 transition(edgeName="t010",targetState="goToPosition",cond=whenEvent("goTo"))
				}	 
				state("goToPosition") { //this:State
					action { //it:State
						storeCurrentMessageForReply()
						if( checkMsgContent( Term.createTerm("goTo(X,Y)"), Term.createTerm("goTo(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var X = payloadArg(0).toInt()
												var Y = payloadArg(1).toInt()
												//var O = payloadArg(2)
								solve("direction(D)","") //set resVar	
								println("Actor: Explorer; State: goToPosition; Payload: direction at start: ${getCurSol("D").toString()}")
								itunibo.planner.plannerUtil.showMap(  )
								itunibo.planner.plannerUtil.setGoal( X, Y  )
								itunibo.planner.moveUtils.doPlan(myself)
						}
					}
					 transition( edgeName="goto",targetState="executePlannedActions", cond=doswitchGuarded({itunibo.planner.moveUtils.existPlan()}) )
					transition( edgeName="goto",targetState="endOfJobFail", cond=doswitchGuarded({! itunibo.planner.moveUtils.existPlan()}) )
				}	 
				state("executePlannedActions") { //this:State
					action { //it:State
						solve("retract(move(M))","") //set resVar	
						if(currentSolution.isSuccess()) { Move = getCurSol("M").toString()
						 }
						else
						{ Move = ""
						 }
					}
					 transition( edgeName="goto",targetState="doTheMove", cond=doswitchGuarded({(Move.length>0) }) )
					transition( edgeName="goto",targetState="endOfJobOk", cond=doswitchGuarded({! (Move.length>0) }) )
				}	 
				state("doTheMove") { //this:State
					action { //it:State
						if(Move=="a" || Move=="d" ){ forward("onerotationstep", "onerotationstep($Move)" ,"onerotateforward" ) 
						 }
						else
						 { forward("onestep", "onestep($StepTime)" ,"onecellforward" ) 
						  }
					}
					 transition(edgeName="t011",targetState="handleStepOk",cond=whenDispatch("stepOk"))
					transition(edgeName="t012",targetState="endOfJobFail",cond=whenDispatch("stepFail"))
					transition(edgeName="t013",targetState="handleStepOk",cond=whenDispatch("rotationOk"))
				}	 
				state("handleStepOk") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.doPlannedMove(myself ,Move )
						delay(PauseTime)
					}
					 transition( edgeName="goto",targetState="executePlannedActions", cond=doswitch() )
				}	 
				state("rotateSouth") { //this:State
					action { //it:State
						Move="a"
						delay(StepTime)
						forward("onerotationstep", "onerotationstep($Move)" ,"onerotateforward" ) 
					}
					 transition(edgeName="t014",targetState="checkSouth",cond=whenDispatch("rotationOk"))
				}	 
				state("checkSouth") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.doPlannedMove(myself ,Move )
						solve("direction(D)","") //set resVar	
						Direction = getCurSol("D").toString() 
						println("Actor: Explorer; State: rotateSouth; Payload: $Direction")
					}
					 transition( edgeName="goto",targetState="rotateSouth", cond=doswitchGuarded({(Direction!="downDir")}) )
					transition( edgeName="goto",targetState="endOfJobOk", cond=doswitchGuarded({! (Direction!="downDir")}) )
				}	 
				state("endOfJobOk") { //this:State
					action { //it:State
						println("Explorer: on the target cell!")
						replyToCaller("goToOk", "goToOk(ok)")
					}
					 transition( edgeName="goto",targetState="ready", cond=doswitch() )
				}	 
				state("endOfJobFail") { //this:State
					action { //it:State
						println("Actor: Explorer; State: handleStepFail; Payload: Fail step :(")
						itunibo.planner.plannerUtil.showMap(  )
						println("Actor: Explorer; State: handleStepFail; Payload: Replan and return at home.")
						replyToCaller("goToFail", "goToFail(fail)")
					}
					 transition( edgeName="goto",targetState="ready", cond=doswitch() )
				}	 
			}
		}
}
