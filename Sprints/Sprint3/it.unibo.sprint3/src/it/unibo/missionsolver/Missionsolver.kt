/* Generated by AN DISI Unibo */ 
package it.unibo.missionsolver

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Missionsolver ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
			
			var addingFood = false
			var preparing = false
			var clearing = false
			var goingHome =false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Actor: Explorer; State: initial")
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						println("Waiting for mission... Please send an action!")
					}
					 transition(edgeName="t00",targetState="addingFood",cond=whenEvent("addFood"))
					transition(edgeName="t01",targetState="preparingRoom",cond=whenEvent("prepare"))
					transition(edgeName="t02",targetState="clearingRoom",cond=whenEvent("clear"))
				}	 
				state("addingFood") { //this:State
					action { //it:State
						println("ADDING FOOD: Go to Fridge")
						addingFood = true
					}
					 transition( edgeName="goto",targetState="goToFridge", cond=doswitch() )
				}	 
				state("preparingRoom") { //this:State
					action { //it:State
						println("PREPARING: Go to Pantry")
						preparing = true
					}
					 transition( edgeName="goto",targetState="goToPantry", cond=doswitch() )
				}	 
				state("clearingRoom") { //this:State
					action { //it:State
						println("ADDING FOOD: Go to Table")
						clearing = true
					}
					 transition( edgeName="goto",targetState="goToTable", cond=doswitch() )
				}	 
				state("goToFridge") { //this:State
					action { //it:State
						forward("modelRequest", "modelRequest(map,fridge)" ,"kb" ) 
					}
					 transition(edgeName="t03",targetState="handlePos",cond=whenDispatch("modelMapResponse"))
				}	 
				state("goToPantry") { //this:State
					action { //it:State
						goingHome=false
						forward("modelRequest", "modelRequest(map,pantry)" ,"kb" ) 
					}
					 transition(edgeName="t04",targetState="handlePos",cond=whenDispatch("modelMapResponse"))
				}	 
				state("goToDishwasher") { //this:State
					action { //it:State
						goingHome=false; clearing=false
						forward("modelRequest", "modelRequest(map,dishwasher)" ,"kb" ) 
					}
					 transition(edgeName="t05",targetState="handlePos",cond=whenDispatch("modelMapResponse"))
				}	 
				state("goToTable") { //this:State
					action { //it:State
						addingFood=false;preparing=false
						forward("modelRequest", "modelRequest(map,table)" ,"kb" ) 
					}
					 transition(edgeName="t06",targetState="handlePos",cond=whenDispatch("modelMapResponse"))
				}	 
				state("goToHome") { //this:State
					action { //it:State
						forward("modelRequest", "modelRequest(map,home)" ,"kb" ) 
					}
					 transition(edgeName="t07",targetState="handlePos",cond=whenDispatch("modelMapResponse"))
				}	 
				state("handlePos") { //this:State
					action { //it:State
						var X=0;var Y=0;
						if( checkMsgContent( Term.createTerm("modelMapResponse(X,Y)"), Term.createTerm("modelMapResponse(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								X=payloadArg(0).toInt();Y=payloadArg(1).toInt()
						}
						forward("goTo", "goTo($X,$Y)" ,"explorer" ) 
					}
					 transition(edgeName="t08",targetState="goalOk",cond=whenDispatch("goToOk"))
					transition(edgeName="t09",targetState="fail",cond=whenDispatch("goToFail"))
				}	 
				state("fail") { //this:State
					action { //it:State
						println("Explorer: fail, return at home in 2s!")
						delay(2000) 
					}
					 transition( edgeName="goto",targetState="goToHome", cond=doswitch() )
				}	 
				state("goalOk") { //this:State
					action { //it:State
						println("Explorer: on the target cell (simulate action 2s)!")
						delay(2000) 
					}
					 transition( edgeName="goto",targetState="checkAddingFood", cond=doswitch() )
				}	 
				state("checkAddingFood") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToTable", cond=doswitchGuarded({addingFood}) )
					transition( edgeName="goto",targetState="checkPreparingRoom", cond=doswitchGuarded({! addingFood}) )
				}	 
				state("checkPreparingRoom") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToTable", cond=doswitchGuarded({preparing}) )
					transition( edgeName="goto",targetState="checkClearingRoom", cond=doswitchGuarded({! preparing}) )
				}	 
				state("checkClearingRoom") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToDishwasher", cond=doswitchGuarded({clearing}) )
					transition( edgeName="goto",targetState="checkGoingHome", cond=doswitchGuarded({! clearing}) )
				}	 
				state("checkGoingHome") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToHome", cond=doswitchGuarded({goingHome}) )
					transition( edgeName="goto",targetState="waiting", cond=doswitchGuarded({! goingHome}) )
				}	 
			}
		}
}
