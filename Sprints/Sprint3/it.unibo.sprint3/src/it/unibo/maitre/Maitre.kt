/* Generated by AN DISI Unibo */ 
package it.unibo.maitre

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Maitre ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			var RepeatAction = 1
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Start maitre")
					}
				}	 
				state("readyForAction") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToPosition", cond=doswitch() )
				}	 
				state("goToPosition") { //this:State
					action { //it:State
						
									var GoalXPosition = 0
									var GoalYPosition = 3
						println("Send Goal (X,Y):($GoalXPosition,$GoalYPosition) to explorer ")
						forward("goTo", "goTo($GoalXPosition,$GoalYPosition)" ,"explorer" ) 
						delay(6500) 
						forward("modelRequest", "modelRequest(robot,location)" ,"kb" ) 
						println("Waiting for response")
					}
					 transition(edgeName="t00",targetState="handleResponse",cond=whenDispatch("modelRobotResponse"))
					transition(edgeName="t01",targetState="handleResponse",cond=whenDispatch("modelErrorResponse"))
				}	 
				state("handleResponse") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("modelRobotResponse(X,Y,O)"), Term.createTerm("modelRobotResponse(X,Y,O)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var X=payloadArg(0)
												var Y=payloadArg(1)
												var O=payloadArg(2)
								println("----->Actual robot Pos: $X $Y $O")
						}
						if( checkMsgContent( Term.createTerm("modelErrorResponse(ERROR)"), Term.createTerm("modelErrorResponse(ERRORE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Errore-->Impossibile ottenere la posizione attuale del robot.")
						}
					}
					 transition( edgeName="goto",targetState="goToPosition", cond=doswitchGuarded({(RepeatAction > 0)}) )
					transition( edgeName="goto",targetState="end", cond=doswitchGuarded({! (RepeatAction > 0)}) )
				}	 
				state("end") { //this:State
					action { //it:State
						println("MAITRE: END :)")
					}
				}	 
			}
		}
}
