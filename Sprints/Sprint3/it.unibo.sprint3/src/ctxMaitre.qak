System system4
mqttBroker "localhost" : 1883


//in futuro andrà sostituito con qualcosa di più articolato 
//ad esempio un messaggio che dica all'Explorer in che posizione della mappa andare
//e dopo ancora che dica all'explorer direttamente cosa fare (es: porta i piatti a lavare)
Dispatch goTo  : goTo( X,Y )

Dispatch modelRequest : modelRequest( TARGET,PROP)
Dispatch modelRobotResponse : modelRobotResponse( X,Y,O ) 
Dispatch modelErrorResponse : modelErrorResponse( ERROR )

Dispatch onerotationstep   : onerotationstep(MOVE)

Dispatch modelChange  : modelChange( TARGET, VALUE )  //force a resource-model change

Context ctxMaitre ip[host="localhost" port=8035] -mqtt
Context ctxDummy ip[host="dummyhost" port=9999] -mqtt 

ExternalQActor kb context ctxDummy
ExternalQActor explorer context ctxDummy
ExternalQActor resourcemodel context ctxDummy
ExternalQActor onerotateforward context ctxDummy
ExternalQActor mindrobot context ctxDummy
/*
 *  So far, Maitre just stends a moveForward command. 
 *  In the future we'll use a web-app to send commands to the resource model.
 */




QActor maitre context ctxMaitre {
	["
		var iter = 0
	"]
	State s0 initial {
		println("Start maitre")
	}
	Goto go
	
	State go {
		["
			var GoalXPosition = 0
			var GoalYPosition = 3
		"]
			
		println("Send Goal (X,Y):($GoalXPosition,$GoalYPosition) to explorer ")	
		forward explorer -m  goTo :  goTo($GoalXPosition,$GoalYPosition) 
		delay 6500		
	
		forward kb -m  modelRequest :  modelRequest( robot, location ) 
		println("Waiting for response")	
	}
	Transition t0  whenMsg   modelRobotResponse  -> handleResponse
					whenMsg   modelErrorResponse  -> handleResponse
		
	State handleResponse {
		onMsg(   modelRobotResponse:  modelRobotResponse( X,Y,O ) ) { 
			["
				var X=payloadArg(0)
				var Y=payloadArg(1)
				var O=payloadArg(2)
			"] 
			println("----->Actual robot Pos: $X $Y $O")	
		}
		onMsg(  modelErrorResponse:  modelErrorResponse(ERRORE ) ) { 
			println("Errore-->Impossibile ottenere la posizione attuale del robot.")	
		}
	} Goto end  if "(iter<=2)" else end
	
		
	State end{
			println("MAITRE: END :)")
	}
}