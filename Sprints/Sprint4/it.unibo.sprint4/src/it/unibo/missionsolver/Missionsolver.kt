/* Generated by AN DISI Unibo */ 
package it.unibo.missionsolver

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Missionsolver ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
			
			var addingFood = false
			var preparing = false
			var clearing = false
			var goingHome = false
		
			var goTable = false
			var goHome = false
			var goFridge = false
			var goPantry = false
			var goDishwasher = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Actor: Mission Solver; State: initial")
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						println("Waiting for mission... Please send an action!")
					}
					 transition(edgeName="t00",targetState="addingFood",cond=whenEvent("addFood"))
					transition(edgeName="t01",targetState="preparingRoom",cond=whenEvent("prepare"))
					transition(edgeName="t02",targetState="clearingRoom",cond=whenEvent("clear"))
					transition(edgeName="t03",targetState="home",cond=whenEvent("home"))
				}	 
				state("addingFood") { //this:State
					action { //it:State
						storeCurrentMessageForReply()
						println("ADDING FOOD: Go to Fridge")
						addingFood = true
								  preparing = false
								  clearing = false
								  goFridge = true
								  goTable = true
								  goHome = true
								  goDishwasher = false
								  goPantry = false
					}
					 transition( edgeName="goto",targetState="checkAddingFood", cond=doswitch() )
				}	 
				state("preparingRoom") { //this:State
					action { //it:State
						storeCurrentMessageForReply()
						println("PREPARING: Go to Pantry")
						addingFood = false
								  preparing = true
								  clearing = false
									//---
								  goFridge = true
								  goTable = true
								  goHome = true
								  goDishwasher = false
								  goPantry = true
					}
					 transition( edgeName="goto",targetState="goToPantry", cond=doswitch() )
				}	 
				state("clearingRoom") { //this:State
					action { //it:State
						storeCurrentMessageForReply()
						println("ADDING FOOD: Go to Table")
						addingFood = false
								  preparing = false
								  clearing = true
								  goFridge = true
								  goTable = true
								  goHome = true
								  goDishwasher = true
								  goPantry = false
					}
					 transition( edgeName="goto",targetState="goToTable", cond=doswitch() )
				}	 
				state("home") { //this:State
					action { //it:State
						storeCurrentMessageForReply()
						println("GO HOME: Go to Home")
						addingFood = false
								  preparing = false
								  clearing = false
								  goFridge = false
								  goTable = false
								  goHome = false
								  goDishwasher = false
								  goPantry = false
					}
					 transition( edgeName="goto",targetState="goToHome", cond=doswitch() )
				}	 
				state("goToFridge") { //this:State
					action { //it:State
						goFridge = false
						forward("modelRequest", "modelRequest(map,fridge)" ,"kb" ) 
					}
					 transition(edgeName="t04",targetState="handlePos",cond=whenDispatch("modelMapResponse"))
				}	 
				state("goToPantry") { //this:State
					action { //it:State
						goPantry = false
						forward("modelRequest", "modelRequest(map,pantry)" ,"kb" ) 
					}
					 transition(edgeName="t05",targetState="handlePos",cond=whenDispatch("modelMapResponse"))
				}	 
				state("goToDishwasher") { //this:State
					action { //it:State
						goDishwasher = false
						forward("modelRequest", "modelRequest(map,dishwasher)" ,"kb" ) 
					}
					 transition(edgeName="t06",targetState="handlePos",cond=whenDispatch("modelMapResponse"))
				}	 
				state("goToTable") { //this:State
					action { //it:State
						goTable = false
						forward("modelRequest", "modelRequest(map,table)" ,"kb" ) 
					}
					 transition(edgeName="t07",targetState="handlePos",cond=whenDispatch("modelMapResponse"))
				}	 
				state("goToHome") { //this:State
					action { //it:State
						forward("modelRequest", "modelRequest(map,home)" ,"kb" ) 
						goHome = false
					}
					 transition(edgeName="t08",targetState="handlePos",cond=whenDispatch("modelMapResponse"))
				}	 
				state("handlePos") { //this:State
					action { //it:State
						var X=0;var Y=0;
						if( checkMsgContent( Term.createTerm("modelMapResponse(X,Y)"), Term.createTerm("modelMapResponse(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								X=payloadArg(0).toInt();Y=payloadArg(1).toInt()
						}
						forward("goTo", "goTo($X,$Y)" ,"explorer" ) 
					}
					 transition(edgeName="t09",targetState="goalOk",cond=whenDispatch("goToOk"))
					transition(edgeName="t010",targetState="fail",cond=whenDispatch("goToFail"))
				}	 
				state("fail") { //this:State
					action { //it:State
						println("WARNING: Explorer: fail.")
						replyToCaller("missionFinish", "missionFinish(fail)")
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("goalOk") { //this:State
					action { //it:State
						println("Explorer: on the target cell (simulate action 2s)!")
						delay(1500) 
					}
					 transition( edgeName="goto",targetState="checkAddingFood", cond=doswitch() )
				}	 
				state("checkAddingFood") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="checkGoFridgeAF", cond=doswitchGuarded({addingFood}) )
					transition( edgeName="goto",targetState="checkPreparingRoom", cond=doswitchGuarded({! addingFood}) )
				}	 
				state("checkPreparingRoom") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="checkGoPantryPR", cond=doswitchGuarded({preparing}) )
					transition( edgeName="goto",targetState="checkClearingRoom", cond=doswitchGuarded({! preparing}) )
				}	 
				state("checkClearingRoom") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="checkGoTableCR", cond=doswitchGuarded({clearing}) )
					transition( edgeName="goto",targetState="reply", cond=doswitchGuarded({! clearing}) )
				}	 
				state("checkGoFridgeAF") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToFridge", cond=doswitchGuarded({goFridge}) )
					transition( edgeName="goto",targetState="checkGoTableAF", cond=doswitchGuarded({! goFridge}) )
				}	 
				state("checkGoTableAF") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToTable", cond=doswitchGuarded({goTable}) )
					transition( edgeName="goto",targetState="checkGoHomeAF", cond=doswitchGuarded({! goTable}) )
				}	 
				state("checkGoHomeAF") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToHome", cond=doswitchGuarded({goHome}) )
					transition( edgeName="goto",targetState="reply", cond=doswitchGuarded({! goHome}) )
				}	 
				state("checkGoPantryPR") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToPantry", cond=doswitchGuarded({goPantry}) )
					transition( edgeName="goto",targetState="checkGoFridgePR", cond=doswitchGuarded({! goPantry}) )
				}	 
				state("checkGoFridgePR") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToFridge", cond=doswitchGuarded({goFridge}) )
					transition( edgeName="goto",targetState="checkGoTablePR", cond=doswitchGuarded({! goFridge}) )
				}	 
				state("checkGoTablePR") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToTable", cond=doswitchGuarded({goTable}) )
					transition( edgeName="goto",targetState="checkGoHomePR", cond=doswitchGuarded({! goTable}) )
				}	 
				state("checkGoHomePR") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToHome", cond=doswitchGuarded({goHome}) )
					transition( edgeName="goto",targetState="reply", cond=doswitchGuarded({! goHome}) )
				}	 
				state("checkGoTableCR") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToTable", cond=doswitchGuarded({goTable}) )
					transition( edgeName="goto",targetState="checkGoFridgeCR", cond=doswitchGuarded({! goTable}) )
				}	 
				state("checkGoFridgeCR") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToFridge", cond=doswitchGuarded({goFridge}) )
					transition( edgeName="goto",targetState="checkGoDishwasherCR", cond=doswitchGuarded({! goFridge}) )
				}	 
				state("checkGoDishwasherCR") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToDishwasher", cond=doswitchGuarded({goDishwasher}) )
					transition( edgeName="goto",targetState="checkGoHomeCR", cond=doswitchGuarded({! goDishwasher}) )
				}	 
				state("checkGoHomeCR") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToHome", cond=doswitchGuarded({goHome}) )
					transition( edgeName="goto",targetState="reply", cond=doswitchGuarded({! goHome}) )
				}	 
				state("reply") { //this:State
					action { //it:State
						replyToCaller("missionFinish", "missionFinish(ok)")
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
}
