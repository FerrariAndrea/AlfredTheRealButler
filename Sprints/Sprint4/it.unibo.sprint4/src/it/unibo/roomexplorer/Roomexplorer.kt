/* Generated by AN DISI Unibo */ 
package it.unibo.roomexplorer

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Roomexplorer ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			var mapEmpty    = false
			val mapname     = "roomBoundary"  //"roomMbot3"		// 
			var Tback       = 0
			var NumStep     = 0
		 
			//REAL ROBOT
			//var StepTime   = 1000	 
			//var PauseTime  = 500 
		
			//VIRTUAL ROBOT
			var StepTime   = 330	 
			var PauseTime  = 250
			var RotateTime = 300
		
			//OTHER
			var Move = ""
			//var PauseTimeL  = PauseTime.toLong()
			var secondLap : Boolean = false
			var mustStop : Boolean = false
		
			var xTemp : Int = 0
			var yTemp : Int = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						itunibo.coap.observer.resourceObserverCoapClient.create( "coap://localhost:5683/resourcemodel"  )
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.moveUtils.showCurrentRobotState(  )
					}
					 transition( edgeName="goto",targetState="waitForCmd", cond=doswitch() )
				}	 
				state("waitForCmd") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="detectPerimeter", cond=doswitchGuarded({secondLap == false}) )
					transition( edgeName="goto",targetState="rotateEast", cond=doswitchGuarded({! secondLap == false}) )
				}	 
				state("rotateEast") { //this:State
					action { //it:State
						NumStep=0
						itunibo.planner.moveUtils.rotateLeft90tuning(myself)
					}
					 transition( edgeName="goto",targetState="detectPerimeter", cond=doswitch() )
				}	 
				state("detectPerimeter") { //this:State
					action { //it:State
						NumStep++
						itunibo.planner.plannerUtil.showMap(  )
					}
					 transition( edgeName="goto",targetState="goOneStepAhead", cond=doswitchGuarded({(NumStep<5)}) )
					transition( edgeName="goto",targetState="perimeterWalked", cond=doswitchGuarded({! (NumStep<5)}) )
				}	 
				state("goOneStepAhead") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						itunibo.planner.moveUtils.attemptTomoveAhead(myself ,StepTime, "onecellforward" )
					}
					 transition(edgeName="t00",targetState="handleStepOk",cond=whenDispatch("stepOk"))
					transition(edgeName="t01",targetState="preCheckingObject",cond=whenDispatch("stepFail"))
				}	 
				state("handleStepOk") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
						delay(500) 
					}
					 transition( edgeName="goto",targetState="goOneStepAhead", cond=doswitch() )
				}	 
				state("preCheckingObject") { //this:State
					action { //it:State
					}
					 transition(edgeName="t02",targetState="checkingObject",cond=whenEvent("collision"))
				}	 
				state("checkingObject") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("collision(OBJECT)"), Term.createTerm("collision(OBJECT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								var objName = payloadArg(0)
								println("OGGETTO IN COLLISIONE: $objName")
								if(objName.equals("pantry")){ 
												xTemp = itunibo.planner.plannerUtil.getPosX()
												yTemp = itunibo.planner.plannerUtil.getPosY()				
								 }
								else
								 { if(objName.equals("dishwasher")){ 
								 				xTemp = itunibo.planner.plannerUtil.getPosX()
								 				yTemp = itunibo.planner.plannerUtil.getPosY()				
								  }
								 else
								  { if(objName.equals("fridge")){ 
								  				xTemp = itunibo.planner.plannerUtil.getPosX()
								  				yTemp = itunibo.planner.plannerUtil.getPosY()				
								   }
								   }
								  }
								var msgContent = ""+xTemp+","+yTemp+","+objName
								println(msgContent)
								forward("modelUpdate", "modelUpdate(map,msgContent)" ,"kb" ) 
						}
					}
					 transition( edgeName="goto",targetState="handleStepFail", cond=doswitch() )
				}	 
				state("handleStepFail") { //this:State
					action { //it:State
						println("&&& Found Wall")
						
								val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()
								//println("MapStr:"+MapStr)
						forward("modelUpdate", "modelUpdate(roomMap,$MapStr)" ,"resourcemodel" ) 
						if( checkMsgContent( Term.createTerm("stepFail(R,T)"), Term.createTerm("stepFail(Obs,Time)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								Tback=payloadArg(1).toString().toInt() / 4
								println("stepFailed ${payloadArg(1).toString()}")
						}
						itunibo.planner.moveUtils.backToCompensate(myself ,Tback, Tback )
						itunibo.planner.plannerUtil.wallFound(  )
						if(secondLap == false){ itunibo.planner.moveUtils.rotateLeft90tuning(myself)
						 }
						else
						 { itunibo.planner.moveUtils.rotateRight90tuning(myself)
						  }
					}
					 transition( edgeName="goto",targetState="detectPerimeter", cond=doswitch() )
				}	 
				state("perimeterWalked") { //this:State
					action { //it:State
						if(secondLap == false){ println("FINAL MAP")
						itunibo.planner.moveUtils.showCurrentRobotState(  )
						itunibo.planner.plannerUtil.saveMap( mapname  )
						secondLap = true
						 }
						else
						 { mustStop = true
						  }
					}
					 transition( edgeName="goto",targetState="waitForCmd", cond=doswitchGuarded({mustStop == false}) )
					transition( edgeName="goto",targetState="endOfJob", cond=doswitchGuarded({! mustStop == false}) )
				}	 
				state("endOfJob") { //this:State
					action { //it:State
						println("Perimeter completely walked. Exit.")
					}
				}	 
			}
		}
}
