/* Generated by AN DISI Unibo */ 
package it.unibo.roomexplorer

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Roomexplorer ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			var mapEmpty    = false
			val mapname     = "roomBoundary"  //"roomMbot3"		// 
			var Tback       = 0
			var NumStep     = 0
		 
			//REAL ROBOT
			//var StepTime   = 1000	 
			//var PauseTime  = 500 
		
			//VIRTUAL ROBOT
			var StepTime   = 330	 
			var PauseTime  = 250
			var RotateTime = 300
		
			//OTHER
			var Move = ""
			//var PauseTimeL  = PauseTime.toLong()
			var secondLap : Boolean = false
			var mustStop : Boolean = false
			
			var needExploreBound : Boolean =false
			var tableFound : Boolean =false
			var directionSud : Boolean =false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						itunibo.coap.observer.resourceObserverCoapClient.create( "coap://localhost:5683/resourcemodel"  )
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.moveUtils.showCurrentRobotState(  )
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="handeCmd",cond=whenDispatch("doExplor"))
				}	 
				state("handeCmd") { //this:State
					action { //it:State
						storeCurrentMessageForReply()
						needExploreBound=false
						if( checkMsgContent( Term.createTerm("doExplor(TARGET)"), Term.createTerm("doExplor(TARGET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												needExploreBound = (payloadArg(0)=="bound")
						}
					}
					 transition( edgeName="goto",targetState="exploreBounds", cond=doswitchGuarded({needExploreBound}) )
					transition( edgeName="goto",targetState="exploreTale", cond=doswitchGuarded({! needExploreBound}) )
				}	 
				state("exploreBounds") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="detectPerimeter", cond=doswitchGuarded({secondLap == false}) )
					transition( edgeName="goto",targetState="rotateEast", cond=doswitchGuarded({! secondLap == false}) )
				}	 
				state("rotateEast") { //this:State
					action { //it:State
						NumStep=0
						itunibo.planner.moveUtils.rotateLeft90(myself)
					}
					 transition( edgeName="goto",targetState="detectPerimeter", cond=doswitch() )
				}	 
				state("detectPerimeter") { //this:State
					action { //it:State
						NumStep++
						itunibo.planner.plannerUtil.showMap(  )
					}
					 transition( edgeName="goto",targetState="goOneStepAhead", cond=doswitchGuarded({(NumStep<5)}) )
					transition( edgeName="goto",targetState="perimeterWalked", cond=doswitchGuarded({! (NumStep<5)}) )
				}	 
				state("goOneStepAhead") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.attemptTomoveAhead(myself ,StepTime, "onecellforward" )
					}
					 transition(edgeName="t01",targetState="handleStepOk",cond=whenDispatch("stepOk"))
					transition(edgeName="t02",targetState="checkingObject",cond=whenEvent("collision"))
				}	 
				state("handleStepOk") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
						delay(500) 
					}
					 transition( edgeName="goto",targetState="goOneStepAhead", cond=doswitch() )
				}	 
				state("checkingObject") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("collision(OBJECT)"), Term.createTerm("collision(OBJECT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val ObjName = payloadArg(0)
								println("OGGETTO IN COLLISIONE: $ObjName")
								if((ObjName.equals("pantry") || ObjName.equals("dishwasher") || ObjName.equals("fridge")|| ObjName.equals("table"))){ 
												val XTemp = itunibo.planner.plannerUtil.getPosX()
												val YTemp = itunibo.planner.plannerUtil.getPosY()	
												tableFound	=ObjName.equals("table")		
								forward("modelUpdateMap", "modelUpdateMap($ObjName,$XTemp,$YTemp)" ,"kb" ) 
								 }
						}
					}
					 transition( edgeName="goto",targetState="handleStepFail", cond=doswitchGuarded({needExploreBound}) )
					transition( edgeName="goto",targetState="handleStepFailTable", cond=doswitchGuarded({! needExploreBound}) )
				}	 
				state("handleStepFail") { //this:State
					action { //it:State
						
								val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()
								//println("MapStr:"+MapStr)
						forward("modelUpdate", "modelUpdate(roomMap,$MapStr)" ,"resourcemodel" ) 
						itunibo.planner.plannerUtil.wallFound(  )
						if(secondLap == false){ itunibo.planner.moveUtils.rotateLeft90(myself)
						 }
						else
						 { itunibo.planner.moveUtils.rotateRight90(myself)
						  }
						delay(1000) 
					}
					 transition( edgeName="goto",targetState="detectPerimeter", cond=doswitch() )
				}	 
				state("perimeterWalked") { //this:State
					action { //it:State
						if(secondLap == false){ println("FINAL MAP")
						itunibo.planner.moveUtils.showCurrentRobotState(  )
						itunibo.planner.plannerUtil.saveMap( mapname  )
						secondLap = true
						 }
						else
						 { mustStop = true
						  }
					}
					 transition( edgeName="goto",targetState="exploreBounds", cond=doswitchGuarded({mustStop == false}) )
					transition( edgeName="goto",targetState="endOfJobBounds", cond=doswitchGuarded({! mustStop == false}) )
				}	 
				state("endOfJobBounds") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.rotateRight90(myself)
						println("Perimeter completely walked. Exit.")
						replyToCaller("endExplor", "endExplor(ok)")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("exploreTale") { //this:State
					action { //it:State
						tableFound=false
					}
					 transition( edgeName="goto",targetState="goOneStepAhead", cond=doswitch() )
				}	 
				state("handleStepFailTable") { //this:State
					action { //it:State
						
								val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()
						forward("modelUpdate", "modelUpdate(roomMap,$MapStr)" ,"resourcemodel" ) 
						itunibo.planner.plannerUtil.wallFound(  )
					}
					 transition( edgeName="goto",targetState="rotate", cond=doswitchGuarded({(!tableFound)}) )
					transition( edgeName="goto",targetState="endOfJobTable", cond=doswitchGuarded({! (!tableFound)}) )
				}	 
				state("rotate") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goOneStepAhead", cond=doswitch() )
				}	 
				state("endOfJobTable") { //this:State
					action { //it:State
						println("Table exploration end.")
						replyToCaller("endExplor", "endExplor(ok)")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
