System sprint1
mqttBroker "localhost" : 1883

Event  envCond        : envCond( CONDTYPE )        //from the environment 
Event  sonarRobot     : sonar( DISTANCE )	     //from  sonar on robot 
Event  sonar          : sonar(SONAR, DISTANCE)	 //from sonar in the robot environment          
Event  polar          : p( Distance, Angle ) 

Event  modelContent   : content( VALUE ) 

Dispatch local_modelChanged   : modelChanged( TARGET, VALUE )
Dispatch robotCmd     : robotCmd( CMD )				  //sent by the mind to the basicrobot

Dispatch modelChange  : modelChange( TARGET, VALUE )  //force a resource-model change
Dispatch modelUpdate  : modelUpdate( TARGET, VALUE )  //sent by the mind
 
Dispatch kbModelUpdate  : kbModelUpdate( TARGET, VALUE )  //force a resource-model change
 
Dispatch stopAppl      : stopAppl( CMD )
Dispatch startAppl     : startAppl( CMD )

Context ctxRobot ip[host="localhost" port=8038] -mqtt
Context ctxMaitre ip[host="localhosta" port=8035] -mqtt // forse non  "localhost" ma "otherresourcelocalhost"
Context ctxResourceModel ip[host="localhostb" port=8036] -mqtt

QActor resourcemodel context ctxResourceModel {
	["var dobackstep = false"]
	State s0 initial {
		solve( consult("sysRules.pl")	 )       
		solve( consult("resourceModel.pl")	 )
		solve( showResourceModel ) 		
		run itunibo.coap.modelResourceCoap.create( myself, "resourcemodel" ) //CoAP access
		
		println("Start resourcemodel")	
	}
	Goto waitModelChange
	
	State waitModelChange{ }
	Transition t0 whenMsg modelChange -> changeModel
	              whenMsg modelUpdate -> updateModel
		
	State updateModel  {
		onMsg(  modelUpdate:  modelUpdate( TARGET, VALUE ) ) { 
			["
				var Target=payloadArg(0)
				var Value=payloadArg(1)
			"]
			println("resourcemodel->richiesta applicazione modifica: $Target , $Value")
			forward kb -m  kbModelUpdate :  kbModelUpdate($Target , $Value ) 
		}
		onMsg( modelUpdate : modelUpdate(robot,V ) ) {
			run itunibo.robot.resourceModelSupport.updateRobotModel( myself, payloadArg(1) )
		}
		onMsg( modelUpdate : modelUpdate(sonarRobot,V ) ) {
			run itunibo.robot.resourceModelSupport.updateSonarRobotModel( myself, payloadArg(1) )
		}
	}	
	Goto  waitModelChange
	
	State changeModel {
		printCurrentMessage 
		//ROBOT MOVE
		onMsg( modelChange : modelChange( robot,V ) ) { // V= w | ...
			run itunibo.robot.resourceModelSupport.updateRobotModel( myself, payloadArg(1) )
			forward mindrobot -m local_modelChanged : modelChanged(  robot,  $payloadArg(1))  //for the robotmind
		} 
		//SONAR DATA  
		onMsg( modelChange : modelChange( sonarRobot,V ) ) { // V= w | ...
			run itunibo.robot.resourceModelSupport.updateSonarRobotModel( myself, payloadArg(1) )
		}
	}
	Goto  waitModelChange
}

QActor mindrobot context ctxRobot{
	["
	var obstacle = false
	"]
	
	State s0 initial {
		println("Start mindrobot")		
	}
	
	Goto waitCmd
	 
	State waitCmd {		} 
		
	Transition t0 whenEvent envCond      -> handleEnvCond
		          whenEvent sonarRobot   -> handleSonarRobot
		          whenEvent local_modelChanged -> handleModelChanged
	
	State handleEnvCond {
		printCurrentMessage
 		onMsg( envCond : envCond(CMD) ) {
 			forward basicrobot -m robotCmd : robotCmd( h )	//First do ...
 			forward resourcemodel -m modelUpdate : modelUpdate(robot,h) //... then update the model
		}
	}
	Goto waitCmd
	
	State handleSonarRobot {
		printCurrentMessage
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){
			["obstacle = Integer.parseInt( payloadArg(0) ) < 10 "]
 		}//onMsg 	 
	}
	Goto waitCmd
	
	State handleModelChanged {
		printCurrentMessage
		onMsg ( local_modelChanged : modelChanged(robot,CMD) ){ 
			forward basicrobot -m robotCmd : robotCmd( $payloadArg(1) )
		}	
	}
	
	Goto handleObstacle if "obstacle" else waitCmd 
	
	State handleObstacle{		
		forward basicrobot -m robotCmd : robotCmd( h )	//First do ...
		forward resourcemodel -m modelUpdate : modelUpdate(robot,h) //... then update the model
	}
	Goto waitCmd
 
	
	
	//Transition t0  whenMsg   modelChange  -> handleRobotCmd
	
	//State handleRobotCmd{ //does not handle alarms 
		//printCurrentMessage 
		//onMsg(  modelChange:  modelChange( TARGET, VALUE ) ) { //MOVE = w | a | s | d | h
		//	["				
		//		var Val0 = payloadArg(0)
		//		var Val1 = payloadArg(1)
		//	"]
		//	forward basicrobot -m  robotCmd :  robotCmd(val) 
		//	//in questo modo posso controllare che il robotCmd sia andato a buon fine
		//	//ed aggiornare di conseguenza la base di conoscenza
		//	println("robotCmd->smistato")
		//	forward resourcemodel -m  modelUpdate :  modelUpdate($Val0,$Val1) 
	//	}	
 //	}  
//	Goto s0
}



QActor basicrobot context ctxRobot{
	
	State s0 initial {
		println("Start basicrobot")
		solve( consult("basicRobotConfig.pl") )   
 		solve( robot(R, PORT) )  //R = virtual | realmbot | realnano
  		ifSolved {println( "USING ROBOT : ${getCurSol(\"R\")},  port= ${getCurSol(\"PORT\")} " )}
  		else {println("no robot")}
  		ifSolved {run itunibo.robot.robotSupport.create(myself, @R, @PORT )}
	}
	Goto waitCmd
	
	State waitCmd{  } //robotCmd comes from a console OUTSIDE this (sub)system
	Transition t0  whenMsg   robotCmd  -> handleRobotCmd
	
	State handleRobotCmd{ //does not handle alarms 
		//printCurrentMessage 
		onMsg( robotCmd : robotCmd( MOVE ) ) { 
			//MOVE = w | a | s | d | h
			run itunibo.robot.robotSupport.move( "msg(${payloadArg(0)})" ) 
			}			
		}
	Goto waitCmd 
}

QActor maitre context ctxMaitre {
		State s0 initial {
		println("Start butler")		
		delay 1000
		forward resourcemodel -m  modelChange :  modelChange(robot, w)
	}
}

QActor kb context ctxResourceModel{
		State s0 initial {
		println("Start kb")		
	}
	Transition t0  whenMsg   kbModelUpdate  -> handleUpdate
	
	State handleUpdate  {
		onMsg(  kbModelUpdate:  kbModelUpdate( TARGET, VALUE ) ) { 
		
			["
				var Target=payloadArg(0)
				var Value=payloadArg(1)
			"]
		}		
	}
}

QActor sonarhandler context ctxRobot {
	State s0 initial {
		println("Start Sonarhandler")		
	}
	Goto waitForEvents
	
	State waitForEvents {}
	   	Transition t0 whenEvent sonar      ->  handleSonar
   	              whenEvent sonarRobot ->  handleSonar
   	               
 	State handleSonar {                      
 		printCurrentMessage                                        
 		onMsg ( sonar  : sonar( SONAR, DISTANCE ) ){    			
		[" val D = Integer.parseInt( payloadArg(1) ) * 5"] //AMPLIFY
			emit polar : p( $D, 90  )  
 		}
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){     
		[" val D = Integer.parseInt( payloadArg(0) ) * 5"] //AMPLIFY
			emit polar : p( $D, 180  ) 
			forward resourcemodel -m modelChange : modelChange(sonarRobot,$payloadArg(0))
 		}
 	} 
 	Goto waitForEvents
}