/* Generated by AN DISI Unibo */ 
package it.unibo.planner

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Planner ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		  
		var Curmove     = ""  
		var IterCounter = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&  planex0 STARTED")
						itunibo.planner.plannerUtil.initAI(  )
						println("INITIAL MAP")
						itunibo.planner.plannerUtil.showMap(  )
					}
					 transition(edgeName="t03",targetState="setGoal",cond=whenEvent("askPlan"))
				}	 
				state("setGoal") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("askPlan(X,Y)"), Term.createTerm("askPlan(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var x = payloadArg(0)
								 				var y = payloadArg(1)
								itunibo.planner.plannerUtil.setGoal( x, y  )
								itunibo.planner.moveUtils.doPlan(myself)
						}
					}
					 transition( edgeName="goto",targetState="executePlannedActions", cond=doswitch() )
				}	 
				state("executePlannedActions") { //this:State
					action { //it:State
						solve("retract(move(M))","") //set resVar	
						if(currentSolution.isSuccess()) { Curmove = getCurSol("M").toString()
						itunibo.planner.moveUtils.doPlannedMove(myself ,Curmove )
						itunibo.planner.plannerUtil.executeMoves(  )
						itunibo.planner.plannerUtil.showMap(  )
						 }
						else
						{ Curmove="nomove" 
						 }
					}
					 transition( edgeName="goto",targetState="executePlannedActions", cond=doswitchGuarded({(Curmove != "nomove")}) )
					transition( edgeName="goto",targetState="goBack", cond=doswitchGuarded({! (Curmove != "nomove")}) )
				}	 
				state("goBack") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.setGoal( "0", "0"  )
						itunibo.planner.moveUtils.doPlan(myself)
						itunibo.planner.plannerUtil.executeMoves(  )
						itunibo.planner.plannerUtil.showMap(  )
						println("------------------>    ENDS")
					}
				}	 
			}
		}
}
