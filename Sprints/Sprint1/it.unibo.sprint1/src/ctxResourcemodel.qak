System system2b
mqttBroker "localhost" : 1883

Dispatch local_modelChanged   : modelChanged( TARGET, VALUE )

Dispatch modelChange  : modelChange( TARGET, VALUE )  //force a resource-model change
Dispatch modelUpdate  : modelUpdate( TARGET, VALUE )  //sent by the mind
 
Dispatch kbModelUpdate  : kbModelUpdate( TARGET, VALUE )  //force a resource-model change
 
Context ctxDummy ip[host="dummyhost" port=9999] -mqtt //as ctxRobot
Context ctxResourceModel ip[host="localhost" port=8036] -mqtt

ExternalQActor mindrobot context ctxDummy

QActor resourcemodel context ctxResourceModel {
	["var dobackstep = false"]
	State s0 initial {
		solve( consult("sysRules.pl")	 )       
		solve( consult("resourceModel.pl")	 )
		solve( showResourceModel ) 		
		run itunibo.coap.modelResourceCoap.create( myself, "resourcemodel" ) //CoAP access
		
		println("Start resourcemodel")	
	}
	Goto waitModelChange
	
	State waitModelChange{ }
	Transition t0 whenMsg modelChange -> changeModel
	              whenMsg modelUpdate -> updateModel
		
	State updateModel  {
		onMsg(  modelUpdate:  modelUpdate( TARGET, VALUE ) ) { 
			["
				var Target=payloadArg(0)
				var Value=payloadArg(1)
			"]
			println("Resource Model -> Invio aggiornamento a KB: $Target , $Value")
			forward kb -m  kbModelUpdate :  kbModelUpdate($Target , $Value ) 
		}
		onMsg( modelUpdate : modelUpdate(robot,V ) ) {
			run itunibo.robot.resourceModelSupport.updateRobotModel( myself, payloadArg(1) )
		}
		onMsg( modelUpdate : modelUpdate(sonarRobot,V ) ) {
			run itunibo.robot.resourceModelSupport.updateSonarRobotModel( myself, payloadArg(1) )
		}
	}	
	Goto  waitModelChange
	
	State changeModel {
		printCurrentMessage 
		//ROBOT MOVE
		onMsg( modelChange : modelChange( robot,V ) ) { // V= w | ...
			run itunibo.robot.resourceModelSupport.updateRobotModel( myself, payloadArg(1) )
			forward mindrobot -m local_modelChanged : modelChanged(  robot,  $payloadArg(1))  //for the robotmind
		} 
		//SONAR DATA  
		onMsg( modelChange : modelChange( sonarRobot,V ) ) { // V= w | ...
			run itunibo.robot.resourceModelSupport.updateSonarRobotModel( myself, payloadArg(1) )
		}
	}
	Goto  waitModelChange
}


QActor kb context ctxResourceModel{
		State s0 initial {
		println("Start kb")		
	}
	Transition t0  whenMsg   kbModelUpdate  -> handleUpdate
	
	State handleUpdate  {
		onMsg(  kbModelUpdate:  kbModelUpdate( TARGET, VALUE ) ) { 
		
			["
				var Target=payloadArg(0)
				var Value=payloadArg(1)
			"]
		}		
	}
}