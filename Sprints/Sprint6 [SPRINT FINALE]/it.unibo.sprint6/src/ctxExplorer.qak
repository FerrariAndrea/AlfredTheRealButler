//ATTENZIONE: viene supposto che il tavolo NON sia mai attaccato al muro, dunque che il robo possa sempre fare un giro completo intorno al tavolo
System system3
mqttBroker "localhost" : 1883

Dispatch modelChange  : modelChange( TARGET, VALUE )  //force a resource-model change
Dispatch onestep       : onestep(DURATION)
Dispatch stepOk        : stepOk(V)		//TODO eliminate  V
Dispatch stepFail      : stepFail(R,T) //R=ok | obstacle, T = time
Dispatch onerotationstep   : onerotationstep(MOVE)
Dispatch rotationOk        : rotationOk(STALL)

Dispatch goTo  : goTo( X,Y )
Dispatch goToOk  : goToOk( V )
Dispatch goToFail  : goToFail( V )

Dispatch modelRequest : modelRequest( TARGET,PROP)  
Dispatch modelMapResponse : modelMapResponse( X,Y ) 

//Macro dispatch
Dispatch addFood : addFood(X,Q) //1 or 2: payload for now is ignored.
Dispatch prepare : prepare(X) //Non so perché senza Payload non mi funziona, quindi ne metto uno che viene ignorato. Idem per clear (Luca)
Dispatch clear : clear(X)
Dispatch home : home(X)
Dispatch missionFinish : missionFinish(X)//risposta

//Dispatch to Smart Devices (Fridge, Dishwasher, Pantry)
Dispatch takeFood : takeFood(X,Q) //Fridge - Add Food & Prepare
Dispatch putFood : putFood(X,Q)	// Fridge - Clear
Dispatch takeDish : takeDish(X) //Pantry
Dispatch putDish : putDish(X) 	//Dishwasher
//-------------------------------------------------------------

Event  sonarRobot     : sonar( DISTANCE )	     //from  sonar on robot 


Event  collision     : collision(OBJECT)	     //from  sonar on robot 
Dispatch modelUpdateMap  : modelUpdateMap( NAME,X,Y )
Dispatch modelUpdate  : modelUpdate( TARGET, VALUE )
Dispatch onestepIW       : onestepIW(DURATION)//IgnoreWall (forse inutile)

Dispatch modelRobotResponse : modelRobotResponse( X,Y,O ) 

Dispatch doExplore : doExplore( TARGET )  
Dispatch endExplore : endExplore(V)

Context ctxExplorer ip[host="localhost" port=8039] -mqtt
Context ctxDummy ip[host="dummyhost" port=9999] -mqtt 

ExternalQActor kb context ctxDummy
ExternalQActor resourcemodel context ctxDummy
ExternalQActor onecellforward context ctxDummy
ExternalQActor onerotateforward context ctxDummy

// Smart devices
ExternalQActor fridge context ctxDummy
ExternalQActor pantry context ctxDummy
ExternalQActor dishwasher context ctxDummy

QActor missionsolver context ctxExplorer{ 
	["	
	var addingFood = false
	var preparing = false
	var clearing = false
	var goingHome = false

	var goTable = false
	var goHome = false
	var goFridge = false
	var goPantry = false
	var goDishwasher = false

	// For Smart devices
	var selectedFood = -1
	var quantityFood = -1
	var quantityDish = -1

	var tableReachedForClearing = false
	var takeFoodFridge = false
	var putFoodFridge = false
	var takeDishPantry = false
	var putDishDishwasher = false
	
	//
	var ActualMissionName =\"\"
	"]
	State s0 initial {	
		println("Actor: Mission Solver; State: initial")	
	}Goto waiting
	
	State waiting{
			println("Waiting for mission... Please send an action!") 	
	}	Transition t0 whenEvent	  addFood -> addingFood
				  	  whenEvent   prepare -> preparingRoom
				 	  whenEvent   clear -> clearingRoom
				  	  whenEvent   home -> home 
				  // ------------------ MACRO COMMANDS ------------------
	
	State addingFood {
		["storeCurrentMessageForReply()"]
		println("ADDING FOOD: Go to Fridge")
		["
		  ActualMissionName=\"AddFood\"
		  addingFood = true
		  preparing = false
		  clearing = false
		  goFridge = true
		  goTable = true
		  goHome = true
		  goDishwasher = false
		  goPantry = false
		  takeFoodFridge = true
		 "]
		 onMsg(addFood : addFood(X,Q)) {
		 	["selectedFood = payloadArg(0).toInt()"]
		 	["quantityFood = payloadArg(1).toInt()"]
		 }
	} Goto checkAddingFood
	
	State preparingRoom {
		["storeCurrentMessageForReply()"]
		println("PREPARING: Go to Pantry")
		["
 		  ActualMissionName=\"PreparingRoom\"
		  addingFood = false
		  preparing = true
		  clearing = false
			//---
		  goFridge = true
		  goTable = true
		  goHome = true
		  goDishwasher = false
		  goPantry = true
		  takeFoodFridge = true
		  takeDishPantry = true 
		 "]		//METTERE PIATTI DAL PANTRY AL TABLE
	} Goto goToPantry
	
	State clearingRoom {
		["storeCurrentMessageForReply()"]
		println("ADDING FOOD: Go to Table")
		["ActualMissionName=\"ClearingRoom\"
		  addingFood = false
		  preparing = false
		  clearing = true
		  goFridge = true
		  goTable = true
		  goHome = true
		  goDishwasher = true
		  goPantry = false
		  putDishDishwasher = false
		  putFoodFridge = false
		  tableReachedForClearing = true
		 "]		//PRENDERE CIBO DAL TAVOLO, PORTARLO AL FRIGO E I PIATTI NEL DISHWASHER
	} Goto goToTable
	
	State home {
		["storeCurrentMessageForReply()"]
		println("GO HOME: Go to Home")
		["ActualMissionName=\"GoToHome\"
		  addingFood = false
		  preparing = false
		  clearing = false
		  goFridge = false
		  goTable = false
		  goHome = false
		  goDishwasher = false
		  goPantry = false
		 "]
	} Goto goToHome
	// ------------------ REACH OBJECTS ------------------
	
	State goToFridge {
		["goFridge = false"]
		forward kb -m modelRequest : modelRequest(map,fridge)
	} Transition t0   whenMsg modelMapResponse  -> handlePos
	
	State goToPantry {
		["goPantry = false"]	
		forward kb -m modelRequest : modelRequest(map,pantry)
	} Transition t0   whenMsg modelMapResponse  -> handlePos
	
	State goToDishwasher {
		["goDishwasher = false"]	
		forward kb -m modelRequest : modelRequest(map,dishwasher)
	} Transition t0   whenMsg modelMapResponse  -> handlePos
	
	State goToTable {
		["goTable = false"]	
		forward kb -m modelRequest : modelRequest(map,table)
	} Transition t0   whenMsg modelMapResponse  -> handlePos
	
	State goToHome {
		forward kb -m modelRequest : modelRequest(map,home)
		["goHome = false"]
	} Transition t0   whenMsg modelMapResponse  -> handlePos
	
 	State  handlePos{
 		["var X=0;var Y=0;"]
 		onMsg(   modelMapResponse:  modelMapResponse(X,Y) ) {			
			["X=payloadArg(0).toInt();Y=payloadArg(1).toInt()"]				
		}
		forward explorer -m goTo : goTo($X,$Y)
 	} Transition t0   whenMsg goToOk  -> goalOk
 					  whenMsg goToFail  -> fail
	
		
 	State fail{
 		println("WARNING: Explorer: fail.")
 		["val Resp = \"Fail$ActualMissionName\""]
 		forward resourcemodel -m modelUpdate : modelUpdate(maitre,$Resp)
		//["replyToCaller(\"missionFinish\", \"missionFinish(fail)\")"]		
 	}Goto waiting
 	
	State goalOk{
 		println("Explorer: on the target cell (simulate action 1.5s)!")
 		delay 1500 // to simulate the action
 		
 		//Interacting with Smart Devices
 		println("CONDITIONS: PUT_FOOD_FRIDGE: $putFoodFridge")
 		println("CONDITIONS: TAKE_FOOD_FRIDGE: $takeFoodFridge")
 		println("CONDITIONS: PUT_DISH_DISHWASHER: $putDishDishwasher")
 		println("CONDITIONS: TAKE_DISH_PANTRY: $takeDishPantry")
 		println("CONDITIONS: TABLE_REACHED_FOR_CLEARING: $tableReachedForClearing")
 		
 		if "tableReachedForClearing" {
 			["
				tableReachedForClearing = false;
				putFoodFridge = true;
			"]
 		} else {
 			 //Clear
 			if "putFoodFridge" {
 				forward fridge -m putFood: putFood(1,5)
 				//forward fridge -m putFood:putFood(2,5)
 				["putFoodFridge = false;"]
 				["putDishDishwasher = true"]
 			} else {
 				if "putDishDishwasher" {
 				forward dishwasher -m putDish:putDish(20)
 				["putDishDishwasher = false"]
 				}
			}
 		//Prepare
 			if "takeDishPantry" {
 				forward pantry -m takeDish:takeDish(20)
 				["takeDishPantry = false"]
 			} else {
 				 		//Add Food e Prepare (caso IF)
 				if "takeFoodFridge" {
 					["var X = selectedFood; var Q = quantityFood
					if (X == -1 && Q == -1) {
						X = 1; Q = 10;
					}
					"]
 					forward fridge -m takeFood:takeFood($X,$Q)
 					["selectedFood = -1; quantityFood = -1;"]
 					["takeFoodFridge = false"]
 				}  		
 			}
 		}
 		

 	} Goto checkAddingFood
 	
 	//Macro Missions Flags
 	State checkAddingFood {} Goto checkGoFridgeAF if "addingFood" else checkPreparingRoom
 	State checkPreparingRoom {} Goto checkGoPantryPR if "preparing" else checkClearingRoom
 	State checkClearingRoom {} Goto checkGoTableCR if "clearing" else reply
 	
 	//Check Adding Food
 	State checkGoFridgeAF {} Goto goToFridge if "goFridge" else checkGoTableAF
 	State checkGoTableAF  {} Goto goToTable  if "goTable"  else checkGoHomeAF
 	State checkGoHomeAF {} Goto goToHome if "goHome" else reply
 	
 	//Check Preparing Food
 	State checkGoPantryPR {} Goto goToPantry if "goPantry" else checkGoFridgePR
 	State checkGoFridgePR  {} Goto goToFridge  if "goFridge"  else checkGoTablePR
 	State checkGoTablePR {} Goto goToTable if "goTable" else checkGoHomePR
 	State checkGoHomePR {} Goto goToHome if "goHome" else reply
 	
 	//Check Clearing Food
 	State checkGoTableCR {} Goto goToTable if "goTable" else checkGoFridgeCR
 	State checkGoFridgeCR  {} Goto goToFridge  if "goFridge"  else checkGoDishwasherCR
 	State checkGoDishwasherCR {} Goto goToDishwasher if "goDishwasher" else checkGoHomeCR
 	State checkGoHomeCR {} Goto goToHome if "goHome" else reply
 	
 	State reply{
 		["val Resp = \"Ok$ActualMissionName\""]
 		forward resourcemodel -m modelUpdate : modelUpdate(maitre,$Resp)
 		//["replyToCaller(\"missionFinish\", \"missionFinish($ActualMissionName)\")"]
 	}Goto waiting
 	
}

QActor explorer context ctxExplorer{ 
	    
	["
	var ignoreFail : Boolean=true;
	//--------------------
	var stepCounter = 0 
	var Move = \"\"
	//var StepTime :Int  = 350	//for virtual
	var StepTime :Int  = 4	//for REAL
	var FixForReal : Long =80 //for REAL
	//var FixForReal : Long =0 //for virtual
	var RotateTime = 300L	//for virtual
	var PauseTime  = 250L 
	var Direction = \"\"
	//-------------------------------
	var mapEmpty    = false
	val mapname     = \"roomBoundary\" 
	var Tback       = 0
	var NumStep     = 0

	var mustStop : Boolean = false
	var RotateStepCount : Int =0

	var needExploreBound : Boolean =false
	var tableFound : Boolean =false
	var directionSud : Boolean =false
	//-------table
	var MapDimX =0;
	var MapDimY=0;
	var ActualTX =0;
	var ActualTY =0;
	var NeedAnotherStep =true;
	var CheckTableSizeStep =0;
	var StartOrientationCheckTable =\"sud\"
	//go to
	var GoToFailed =false;
	//-------FIX GO HOME
	var IsFixForHome = false;
	var NeedReplyForFixHome =false;
	"]
	State s0 initial {
		
		println("Actor: Explorer; State: initial")		
	    solve( consult("moves.pl")	 )//forse da rimuovere
		run itunibo.coap.observer.resourceObserverCoapClient.create( "coap://localhost:5683/resourcemodel" )
 		run itunibo.planner.plannerUtil.initAI()
		run itunibo.planner.moveUtils.showCurrentRobotState()
		run itunibo.planner.plannerUtil.showMap()
	}Goto waitCmd
	//--------------------------------------------------------------EXPLORE BOUND AND TABLE
	State waitCmd{
		println("Waiting for exploration cmd...")
		["needExploreBound=false;IsFixForHome=false;NeedReplyForFixHome=false;"]
	}Transition t0 whenMsg doExplore -> handeCmd
				 whenEvent   goTo  -> goToPosition
		
	State handeCmd{
		["storeCurrentMessageForReply()"]	
		onMsg(   doExplore:  doExplore(TARGET) ) { 
			
			["
				needExploreBound = (payloadArg(0)==\"bound\")				
			"]
		}//else explore for table 		
	}Goto exploreBounds if "needExploreBound" else exploreTable
	
	
	
	//----------------------------------------------------------------------------------------------------------exploreBounds
	State exploreBounds {		
			println("Start explore bounds.")
			["NumStep=0;RotateStepCount=0"]
	} 
	Goto  detectPerimeter
	
	State rotateEast {
		["NumStep=0"]
		["Move=\"a\""]
		forward onerotateforward -m onerotationstep : onerotationstep(a)				
		run itunibo.planner.moveUtils.doPlannedMove(myself, Move)
			 		
	} Transition t0 whenMsg rotationOk -> detectPerimeter

	State detectPerimeter {		
		["NumStep++;RotateStepCount=0"]
  		run itunibo.planner.plannerUtil.showMap()  	
	} Goto goOneStepAhead if "(NumStep<5)" else perimeterWalked
	
	State goOneStepAhead {
		delayVar FixForReal
   		run itunibo.planner.moveUtils.attemptTomoveAhead(myself, StepTime, "onecellforward")
	} 
	Transition t0 whenMsg stepOk -> handleStepOk
				whenEvent collision -> checkingObject

	State handleStepOk {
		["NeedAnotherStep =true;"]
		if "needExploreBound"{			
			run itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
		}else{			
			run itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)//facoltativo
			["	
				ActualTY++
				NeedAnotherStep= (ActualTY<MapDimY-1 && CheckTableSizeStep==0)
			"]			
			if "CheckTableSizeStep>0"{
				if "(CheckTableSizeStep==3)"{
					["CheckTableSizeStep=4"]//fine tavolo DimY trovata
				}else{
					["CheckTableSizeStep=2"]//fine tavolo DimX trovata
				}			
			}
			
		}
		
		delay 250
	} Goto goOneStepAhead if "NeedAnotherStep" else handleStepFailTable
		  
	State checkingObject {
		onMsg(collision : collision(OBJECT)) {
			["val ObjName = payloadArg(0)"]
			println("OGGETTO IN COLLISIONE: $ObjName")
			if "(ObjName.equals(\"pantry\") || ObjName.equals(\"dishwasher\") || ObjName.equals(\"fridge\")|| ObjName.equals(\"table\"))" {
				["
				val XTemp = itunibo.planner.plannerUtil.getPosX()
				val YTemp = itunibo.planner.plannerUtil.getPosY()	
				tableFound	=ObjName.equals(\"table\")		
				"]
				forward kb -m modelUpdateMap : modelUpdateMap($ObjName, $XTemp,$YTemp)
				//per il tavolo si potrebbe pensare di salvare tutte le posizioni in cui risiede
				//in modo da fare quando serve un ToGo Table alla posizione più vicina
			}
			
		}
	} Goto consumeStepFailBound if "needExploreBound" else consumeStepFailTable
	
	State consumeStepFailBound{}Transition t0 whenMsg stepFail ->  handleStepFail	
	
	State consumeStepFailTable{
		println("Part of table found, map:")
		run itunibo.planner.plannerUtil.showMap()
	}Transition t0 whenMsg stepFail ->  handleStepFailTable
		
	State handleStepFail {
		delay 500	
		if "RotateStepCount==0" {			
			run itunibo.planner.plannerUtil.wallFound()
			["Move=\"d\""]
			forward onerotateforward -m onerotationstep : onerotationstep(d)				
			run itunibo.planner.moveUtils.doPlannedMove(myself, Move)
		}
		if "RotateStepCount==1"{			
			["val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()"]
			forward resourcemodel -m modelUpdate : modelUpdate(roomMap, $MapStr)
			//run itunibo.planner.plannerUtil.wallFound() //facoltativo
			["Move=\"a\""]
			forward onerotateforward -m onerotationstep : onerotationstep(a)				
			run itunibo.planner.moveUtils.doPlannedMove(myself, Move)				
		}
		if "RotateStepCount==2"{	
			//facoltativo
			/*
			["val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()"]
			forward resourcemodel -m modelUpdate : modelUpdate(roomMap, $MapStr)		
			run itunibo.planner.plannerUtil.wallFound() 
			 */
			["Move=\"a\""]
			forward onerotateforward -m onerotationstep : onerotationstep(a)				
			run itunibo.planner.moveUtils.doPlannedMove(myself, Move)				
		}
		["RotateStepCount++"]
	}Transition t0 whenMsg rotationOk -> checkRotateStep1

	State checkRotateStep1{
		
	}Goto goOneStepAhead if "(RotateStepCount==1)" else checkRotateStep2
	
	State checkRotateStep2{
		
	}Goto handleStepFail if "(RotateStepCount==2)" else detectPerimeter
	
	
	State perimeterWalked {println("FINAL MAP")
			run itunibo.planner.moveUtils.showCurrentRobotState()
			run itunibo.planner.plannerUtil.saveMap(mapname)
			["
					MapDimX = itunibo.planner.plannerUtil.getMapDimX()-1
					MapDimY = itunibo.planner.plannerUtil.getMapDimY()-1
			"]
			
			println("Perimeter completely walked. DimX: $MapDimX DimY: $MapDimY")
			//["val D = \"down\""]
			//run itunibo.planner.plannerUtil.autoResetRobotPos(0,0,D)
			["replyToCaller(\"endExplore\", \"endExplore(ok)\")"]	
			forward resourcemodel -m modelUpdate : modelUpdate(maitre,endExploreBoundOk)
	} Goto waitCmd 
	//----------------------------------------------------------------------------------------------------------exploreTable

	State exploreTable{
		println("Start explore table.")
		["tableFound=false;ActualTX =0;ActualTY =0;CheckTableSizeStep=0;"]
	}Goto goOneStepAhead 
	

	State handleStepFailTable {
		if "CheckTableSizeStep<2"{
			//facoltativo----inizio
			["val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()"]
			forward resourcemodel -m modelUpdate : modelUpdate(roomMap, $MapStr)
			//facoltativo----fine
			if "tableFound"{
				run itunibo.planner.plannerUtil.autoSetTablePos()
				["CheckTableSizeStep=1"]
			}
		}
		
	} Goto askOrientation if "(CheckTableSizeStep<2)" else swithcerCheckTableDim1
	
	State swithcerCheckTableDim1{}Goto rotateForTableDimY if "(CheckTableSizeStep<3)" else swithcerCheckTableDim2
	
	State swithcerCheckTableDim2{}Goto checkTableDimYRotateBefore if "(CheckTableSizeStep<4)" else endOfJobTable
	
	State askOrientation{
		forward kb -m modelRequest : modelRequest(robot, location)
	}Transition t0 whenMsg modelRobotResponse ->  rotateBefore	
	
	State rotateForTableDimY{
			if "StartOrientationCheckTable==\"sud\""{
				["Move=\"d\""]
				forward onerotateforward -m onerotationstep : onerotationstep(d)				
				run itunibo.planner.moveUtils.doPlannedMove(myself, Move)	
			}
			if "StartOrientationCheckTable==\"nord\""{
				["Move=\"a\""]
				forward onerotateforward -m onerotationstep : onerotationstep(a)				
				run itunibo.planner.moveUtils.doPlannedMove(myself, Move)	
			}		
			["CheckTableSizeStep=3"]	
	}Transition t0 whenMsg rotationOk -> goOneStepAhead
	

	State checkTableDimYRotateBefore{
			if "StartOrientationCheckTable==\"sud\""{
				["Move=\"a\""]
				forward onerotateforward -m onerotationstep : onerotationstep(a)				
				run itunibo.planner.moveUtils.doPlannedMove(myself, Move)	
			}
			if "StartOrientationCheckTable==\"nord\""{
				["Move=\"d\""]
				forward onerotateforward -m onerotationstep : onerotationstep(d)				
				run itunibo.planner.moveUtils.doPlannedMove(myself, Move)	
			}		
	}Transition t0 whenMsg rotationOk -> checkTableDimYmoveOne
	
	State checkTableDimYmoveOne{
		delay 250
		run itunibo.planner.moveUtils.attemptTomoveAhead(myself, StepTime, "onecellforward")
	} 
	Transition t0 whenMsg stepOk -> checkTableDimYRotateAfter
				whenEvent collision -> checkingObject//questo potrebbe creare molti problemi se il tavolo è attaccato al muro
				
	State checkTableDimYRotateAfter{	
			run itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
			println("stand by the table, map:")
			run itunibo.planner.plannerUtil.showMap()			
			if "StartOrientationCheckTable==\"sud\""{
				["Move=\"d\""]
				forward onerotateforward -m onerotationstep : onerotationstep(d)				
				run itunibo.planner.moveUtils.doPlannedMove(myself, Move)	
			}
			if "StartOrientationCheckTable==\"nord\""{
				["Move=\"a\""]
				forward onerotateforward -m onerotationstep : onerotationstep(a)				
				run itunibo.planner.moveUtils.doPlannedMove(myself, Move)	
			}		
	}Transition t0 whenMsg rotationOk -> goOneStepAhead
	
	State rotateBefore{
		onMsg(modelRobotResponse : modelRobotResponse(X,Y,O)) {
			["StartOrientationCheckTable = payloadArg(2)"]
			if "StartOrientationCheckTable==\"sud\""{
				["Move=\"a\""]
				forward onerotateforward -m onerotationstep : onerotationstep(a)				
				run itunibo.planner.moveUtils.doPlannedMove(myself, Move)	
			}
			if "StartOrientationCheckTable==\"nord\""{
				["Move=\"d\""]
				forward onerotateforward -m onerotationstep : onerotationstep(d)				
				run itunibo.planner.moveUtils.doPlannedMove(myself, Move)	
			}			
		}
	}Transition t0 whenMsg rotationOk -> moveOne
	
	State moveOne{
		delay 250
		run itunibo.planner.moveUtils.attemptTomoveAhead(myself, StepTime, "onecellforward")
	} 
	Transition t0 whenMsg stepOk -> rotateAfter
				whenEvent collision -> checkingObject//questo potrebbe creare molti problemi se il tavolo è attaccato al muro
				
	State rotateAfter{
		if "tableFound"{
			run itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
			delay 250
			if "Move==\"a\""{
				["Move=\"d\""]
				forward onerotateforward -m onerotationstep : onerotationstep(d)
			}else{
				["Move=\"a\""]
				forward onerotateforward -m onerotationstep : onerotationstep(a)
			}			
		}else{
			run itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
			delay 250
			if "Move==\"a\""{
				forward onerotateforward -m onerotationstep : onerotationstep(a)
			}else{
				forward onerotateforward -m onerotationstep : onerotationstep(d)
			}				
		}
			run itunibo.planner.moveUtils.doPlannedMove(myself, Move)		
			["ActualTY=0;ActualTX++"]	
			
	}Transition t0 whenMsg rotationOk -> goOneStepAhead
	
	State endOfJobTable {
		run itunibo.planner.moveUtils.showCurrentRobotState()
		println("Map after explore table")
		run itunibo.planner.plannerUtil.showMap()
		run itunibo.planner.plannerUtil.saveMap(mapname)//facoltativo
		println("Table exploration end, starting fix-go-home")
		//["replyToCaller(\"endExplore\", \"endExplore(ok)\")"]	
	}Goto startFixGoHome
	//--------------------------------------------------------------EXPLORE FIX GOHOME
	State startFixGoHome{
		["IsFixForHome=true;NeedReplyForFixHome=true;"]
		run itunibo.planner.plannerUtil.setGoal(0,0)
		run itunibo.planner.moveUtils.doPlan( myself )
	}Goto executePlannedActions  if "itunibo.planner.moveUtils.existPlan()" else checkRotation 

	State checkNord{
		run itunibo.planner.moveUtils.doPlannedMove(myself, Move)
		["Direction = itunibo.planner.plannerUtil.getDirection()"]
		println("Actor: Explorer; State: rotateSouth; Payload: $Direction")
	}Goto rotateSouth  if "(Direction!=\"upDir\")" else forceGoUp
	State rotateNord{
		["Move=\"a\""]
		delayVar PauseTime //questo prima era uno StepTime
		forward onerotateforward -m onerotationstep : onerotationstep($Move)//
   		
	}Transition t0	whenMsg rotationOk 	-> checkRotation
	
	State forceGoUp{
		forward onecellforward -m onestep : onestep($StepTime)//non lo registro nel planner
	}Transition t1 whenMsg stepOk   	-> endFixGoHome   
					whenMsg stepFail 	-> endFixGoHome
	
	State endFixGoHome{
		["IsFixForHome=false"]
	}Goto checkRotation
	
	
	
	//--------------------------------------------------------------EXPLORE GO TO 
 	
	State goToPosition{
		["GoToFailed=false"]
	 	["storeCurrentMessageForReply()"]
	 	onMsg(   goTo:  goTo(X,Y) ) { 
			
			["
				var X = payloadArg(0).toInt()
				var Y = payloadArg(1).toInt()
				//var O = payloadArg(2)
			"]
				
		solve( direction(D) )   
   		println("Actor: Explorer; State: goToPosition; Payload: direction at start: ${getCurSol(\"D\").toString()}")
		run itunibo.planner.plannerUtil.showMap()		
		run itunibo.planner.plannerUtil.setGoal(X,Y)
		run itunibo.planner.moveUtils.doPlan( myself )
		}
 	}Goto executePlannedActions  if "itunibo.planner.moveUtils.existPlan()" else checkRotation 


	State executePlannedActions{ 
		solve( retract( move(M) ) ) //consume a move
		ifSolved {  
			["Move = getCurSol(\"M\").toString()"]
		} else { ["Move = \"\""]  } 
 	}
	Goto doTheMove  if "(Move.length>0) " else checkRotation
 	
 	State doTheMove{
		if "Move==\"a\" || Move==\"d\" " {//ROTATION			
			forward onerotateforward -m onerotationstep : onerotationstep($Move)	
		} else{ // W			
			forward onecellforward -m onestep : onestep($StepTime)	
		}	
		
	}
	Transition t0   whenMsg stepOk   	-> handleStepOkGoTo   
					whenMsg stepFail 	-> handleStepFailGoTo//endOfJobFail  
					whenMsg rotationOk 	-> handleStepOkGoTo
	 	
	State handleStepOkGoTo{
		//println("GOTO->StepOK")		
		run itunibo.planner.moveUtils.doPlannedMove(myself, Move)	
		delayVar PauseTime	
	}
	Goto executePlannedActions
	
	State handleStepFailGoTo{
		println("GOTO->StepFail")		
		if "ignoreFail"{
			run itunibo.planner.moveUtils.doPlannedMove(myself, Move)
			forward kb -m modelUpdate : modelUpdate(  robot,  w)
		}			
		delayVar PauseTime
		["GoToFailed=true"]	
	}
	Goto executePlannedActions if "ignoreFail" else rotateSouth

	State rotateSouth{
		["Move=\"a\""]
		delayVar PauseTime //questo prima era uno StepTime
		forward onerotateforward -m onerotationstep : onerotationstep($Move)//
   		
	}Transition t0	whenMsg rotationOk 	-> checkRotation

	State checkSouth{
		run itunibo.planner.moveUtils.doPlannedMove(myself, Move)	
		//solve( direction(D) )
		//["Direction = getCurSol(\"D\").toString() "]
		["Direction = itunibo.planner.plannerUtil.getDirection()"]
		println("Actor: Explorer; State: rotateSouth; Payload: $Direction")
	}
	Goto rotateSouth  if "(Direction!=\"downDir\")" else endOfJob
	
	State endOfJob{
		if "NeedReplyForFixHome"{
			["replyToCaller(\"endExplore\", \"endExplore(ok)\")"]	
			forward resourcemodel -m modelUpdate : modelUpdate(maitre,endExploreTableOk)
			println("FixGoHome end.")	
		}else{
			if "GoToFailed"{
				println("Actor: Explorer; State: handleStepFail; Payload: Fail step :(")
				run itunibo.planner.plannerUtil.showMap()	
				println("Actor: Explorer; State: handleStepFail; Payload: Replan and return at home.")
				["replyToCaller(\"goToFail\", \"goToFail(fail)\")"]	
				//forward resourcemodel -m modelUpdate : modelUpdate(maitre,goToFail)
			}else{
				println("Explorer: on the target cell!")
				["replyToCaller(\"goToOk\", \"goToOk(ok)\")"]
				//forward resourcemodel -m modelUpdate : modelUpdate(maitre,goToOk)	
			}
		}
	
		
	
	} Goto waitCmd 
	
	State checkRotation{}Goto checkNord if "IsFixForHome" else checkSouth
	
}	
