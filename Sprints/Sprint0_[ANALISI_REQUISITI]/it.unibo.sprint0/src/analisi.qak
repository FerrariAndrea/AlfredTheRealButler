System analisi 
mqttBroker "localhost" : 1883

Event  envCond        : envCond( CONDTYPE )        //from the environment 
Event  sonarRobot     : sonar( DISTANCE )	     //from  sonar on robot 
Event  sonar          : sonar(SONAR, DISTANCE)	 //from sonar in the robot environment          
Event  polar          : p( Distance, Angle ) 

Event  modelContent   : content( VALUE ) 


Dispatch  local_modelChanged   : modelChanged( TARGET, VALUE )
Dispatch robotCmd     : robotCmd( CMD )				  //sent by the mind to the basicrobot

Dispatch modelChange  : modelChange( TARGET, VALUE )  //force a resource-model change
Dispatch modelUpdate  : modelUpdate( TARGET, VALUE )  //sent by the mind
 
Dispatch kbModelUpdate  : kbModelUpdate( TARGET, VALUE )  //force a resource-model change

 
 
 
Dispatch stopAppl      : stopAppl( CMD )
Dispatch startAppl     : startAppl( CMD )

Context ctxRobot ip[host="localhost" port=8038] -mqtt
Context ctxMaitre ip[host="localhosta" port=8035] -mqtt // forse non  "localhost" ma "otherresourcelocalhost"
Context ctxResourceModel ip[host="localhostb" port=8036] -mqtt 



ExternalQActor maitre context ctxMaitre


QActor basicrobot context ctxRobot{
	
	State s0 initial {
		println("Start basicrobot")		
	}Transition t0  whenMsg   robotCmd  -> handleRobotCmd
	
	State handleRobotCmd{ //does not handle alarms 
		//printCurrentMessage 
		onMsg( robotCmd : robotCmd( MOVE ) ) { //MOVE = w | a | s | d | h
			["
				var Mossa = payloadArg(0)
			"]
			println("move-->$Mossa")
		}	
 	}  
	Goto s0 
}

QActor mindrobot context ctxRobot{
	["var Curmove = \"\""]
	State s0 initial {
		println("Start mindrobot")		
	}Transition t0  whenMsg   modelChange  -> handleRobotCmd
	
	State handleRobotCmd{ //does not handle alarms 
		//printCurrentMessage 
		onMsg(  modelChange:  modelChange( TARGET, VALUE ) ) { //MOVE = w | a | s | d | h
			["				
				var Val0 = payloadArg(0)
				var Val1 = payloadArg(1)
			"]
			forward basicrobot -m  robotCmd :  robotCmd(val) 
			//in questo modo posso controllare che il robotCmd sia andato a buon fine
			//ed aggiornare di conseguenza la base di conoscenza
			println("robotCmd->smistato")
			forward resourcemodel -m  modelUpdate :  modelUpdate($Val0,$Val1) 
		}	
 	}  
	Goto s0 
}


QActor butler context ctxRobot{
	State s0 initial {
		println("Start butler")		
		delay 1000
		forward mindrobot -m  modelChange :  modelChange(robot, w) 
			
	}
	
}



QActor fridge context ctxRobot{
	State s0 initial {
		println("Start fridge")		
	}
}



QActor resourcemodel context ctxResourceModel{
	State s0 initial {
		println("Start resourcemodel")		
	}Transition t0  whenMsg   modelUpdate  -> handleUpdate
	
	State handleUpdate  {
		onMsg(  modelUpdate:  modelUpdate( TARGET, VALUE ) ) { 
			["
				var Target=payloadArg(0)
				var Value=payloadArg(1)
			"]
			println("resourcemodel->richiesta applicazione modifica: $Target , $Value")
			forward kb -m  kbModelUpdate :  kbModelUpdate($Target , $Value ) 
		}		
	}
	
}
QActor kb context ctxResourceModel{
		State s0 initial {
		println("Start kb")		
	}
	Transition t0  whenMsg   kbModelUpdate  -> handleUpdate
	
	State handleUpdate  {
		onMsg(  kbModelUpdate:  kbModelUpdate( TARGET, VALUE ) ) { 
		
			["
				var Target=payloadArg(0)
				var Value=payloadArg(1)
			"]
			println("KB->modello cambiato: $Target , $Value") 
		}		
	}
}
