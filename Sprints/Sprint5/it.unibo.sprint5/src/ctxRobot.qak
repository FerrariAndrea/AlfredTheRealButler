System system1
mqttBroker "localhost" : 1883

Event  envCond        : envCond( CONDTYPE )        //from the environment 
Event  sonarRobot     : sonar( DISTANCE )	     //from  sonar on robot 
Event  sonar          : sonar(SONAR, DISTANCE)	 //from sonar in the robot environment          
Event  polar          : p( Distance, Angle ) 
Event  collision	  : collision(OBJECT)

Dispatch onestep       : onestep(DURATION)
//Dispatch onestepIW       : onestepIW(DURATION)//IgnoreWall
Dispatch stepOk        : stepOk(V)		//TODO eliminate  V
Dispatch stepFail      : stepFail(R,T) //R=ok | obstacle, T = time
Dispatch onerotationstep   : onerotationstep(MOVE)
Dispatch rotationOk        : rotationOk(STALL)

Dispatch local_modelChanged   : modelChanged( TARGET, VALUE )
Dispatch robotCmd     : robotCmd( CMD )				  //sent by the mind to the basicrobot

Dispatch modelChange  : modelChange( TARGET, VALUE )  //force a resource-model change
Dispatch modelUpdate  : modelUpdate( TARGET, VALUE )  //sent by the mind

Dispatch stop  : stop(V )  
Dispatch resume  : resume( V )  



Context ctxRobot ip[host="localhost" port=8038] -mqtt
Context ctxDummy ip[host="dummyhost" port=9999] -mqtt

ExternalQActor kb context ctxDummy
ExternalQActor resourcemodel context ctxDummy

QActor mindrobot context ctxRobot{
	["var obstacle = false"]
	
	State s0 initial {
		println("Start mindrobot")		
	}
	
	Goto waitCmd
	 
	State waitCmd {		} 
	Transition t0 whenEvent envCond      -> handleEnvCond
		       //   whenEvent sonarRobot   -> handleSonarRobot
		          whenEvent local_modelChanged -> handleModelChanged
	
	State handleEnvCond {
		//printCurrentMessage
 		onMsg( envCond : envCond(CMD) ) {
 			forward basicrobot -m robotCmd : robotCmd( h )	//First do ...
 			forward resourcemodel -m modelUpdate : modelUpdate(robot,h) //... then update the model
		}
		
	}
	Goto waitCmd
		
	State handleModelChanged {
		//printCurrentMessage
		onMsg ( local_modelChanged : modelChanged(robot,CMD) ){ 
			forward basicrobot -m robotCmd : robotCmd( $payloadArg(1) )	
			forward resourcemodel -m modelUpdate : modelUpdate(robot,$payloadArg(1)) //... then update the model
				
		}	
	}
	Goto waitCmd


}
QActor basicrobot context ctxRobot{
	State s0 initial {
		println("Start basicrobot")
		solve( consult("basicRobotConfig.pl") )   
 		solve( robot(R, PORT) )  //R = virtual | realmbot | realnano
  		ifSolved {println( "USING ROBOT : ${getCurSol(\"R\")},  port= ${getCurSol(\"PORT\")} " )}
  		else {println("no robot")}
  		ifSolved {run itunibo.robot.robotSupport.create(myself, @R, @PORT )}
	}
	Goto waitCmd
	
	State waitCmd{  } //robotCmd comes from a console OUTSIDE this (sub)system
	Transition t0  whenMsg   robotCmd  -> handleRobotCmd
	
	State handleRobotCmd{ //does not handle alarms 
		//printCurrentMessage 
		onMsg( robotCmd : robotCmd( MOVE ) ) { 
			//MOVE = w | a | s | d | h
			run itunibo.robot.robotSupport.move( "msg(${payloadArg(0)})" ) 
			}			
		}
	Goto waitCmd 
}

QActor sonarhandler context ctxRobot {
	State s0 initial {
		println("Start Sonarhandler")		
	}
	Goto waitForEvents
	
	State waitForEvents {}
	   	Transition t0 whenEvent sonar      ->  handleSonar
   	              whenEvent sonarRobot ->  handleSonar
   	               
 	State handleSonar {      
 	/*                                 
 		onMsg ( sonar  : sonar( SONAR, DISTANCE ) ){    			
		[" val D = Integer.parseInt( payloadArg(1) ) * 5"] //AMPLIFY
			emit polar : p( $D, 90  )  
 		} 		    
 	*/
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){     
	//	[" val D = Integer.parseInt( payloadArg(0) ) * 5"] //AMPLIFY
	//		emit polar : p( $D, 180  ) 
			forward resourcemodel -m modelUpdate : modelUpdate(sonarRobot,$payloadArg(0))
 		}
 	} 
 	Goto waitForEvents
}

QActor onerotateforward context ctxRobot {
	["
		var RealMove = \"a\"
		val CompleteRotateTime = 300L //RotateTime
	"]
	State s0 initial {	   		
		println("Start onerotateforward")
	}Goto ready
	
	State ready{
	}Transition t0 whenMsg onerotationstep -> doRotationForward
					whenMsg stop -> paused
					
	State paused{
		println("onerotateforward is PAUSED")
	}Transition t0 whenMsg resume -> ready
		
	State doRotationForward{		  
		println("ROTATION")
		["storeCurrentMessageForReply()"]		
		onMsg( onerotationstep : onerotationstep(ORIENTATION) ) {
			["RealMove = payloadArg(0)"]
		}
	
	}Goto bigRotation if "(RealMove==\"a\" || RealMove == \"d\")" else endDoRotationForward
	
	State bigRotation{
		
		if "RealMove==\"a\""{
	  			//forward mindrobot -m local_modelChanged : modelChanged(robot, a)
	  			forward resourcemodel -m modelChange : modelChange(robot,a)
	  			delayVar CompleteRotateTime
	  			//forward mindrobot -m local_modelChanged : modelChanged(robot, h)
	  			forward resourcemodel -m modelChange : modelChange(robot,h)
	  	}
		if "RealMove==\"d\""{
			//forward mindrobot -m local_modelChanged : modelChanged(robot, d)
			forward resourcemodel -m modelChange : modelChange(robot,d)
			delayVar CompleteRotateTime
	 		//forward mindrobot -m local_modelChanged : modelChanged(robot, h)
	 		forward resourcemodel -m modelChange : modelChange(robot,h)
		}
		
	}Goto endDoRotationForward
	State endDoRotationForward{
		//Rotation ok quindi salvo sulla kb
		if "RealMove==\"a\""{
	  		forward kb -m modelUpdate : modelUpdate(  robot,  a)
	  	}
		if "RealMove==\"d\""{
			forward kb -m modelUpdate : modelUpdate(  robot, d)
		}  				
		delay 500//per fixare eventuali errori sulle tempistiche
		["replyToCaller(\"rotationOk\", \"rotationOk(0)\")"]
	}
	Goto ready
}

QActor onecellforward context ctxRobot {
	["
		var foundObstacle = false;
		var StepTime = 0L;
		var Duration : Long =0;
		var PauseTime :Long =250;
	"]  
	State s0 initial {	 
		println("Start onecellforward")  		
	} Goto ready
	
	State ready{
		["foundObstacle = false"]	
	}
	Transition t0 whenMsg onestep -> doMoveForward
					whenMsg stop -> paused
					//whenMsg onestepIW -> doMoveForward
					
					
	State paused{
		println("onecellforward is PAUSED")
	}Transition t0 whenMsg resume -> ready
		
	       
	State doMoveForward{
		["storeCurrentMessageForReply()"] 
		onMsg( onestep : onestep( TIME ) ) {
			["StepTime = payloadArg(0).toLong()"]
			forward resourcemodel -m modelChange : modelChange(robot,w)
			run itunibo.planner.plannerUtil.startTimer()
		}
	} 
	Transition t0 whenTimeVar  StepTime -> endDoMoveForward		
 		          whenEvent sonarRobot  -> handleSonarRobot
		  
	State endDoMoveForward{
		forward resourcemodel -m modelChange : modelChange(robot,h)
		forward kb -m modelUpdate : modelUpdate(  robot,  w)  
		//delay 50//per fixare eventuali errori sulle tempistiche		
		["replyToCaller(\"stepOk\", \"stepOk(ok)\")"]	
	}
	Goto ready
	
	//Substitute with an ad-hoc actor for a real robot
	State handleSonarRobot{  //before than the step time
		run itunibo.planner.moveUtils.setDuration(myself)
		//printCurrentMessage
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){   
				["foundObstacle = (Integer.parseInt( payloadArg(0) ) <20)"]
   		}
	}	
	Goto stepFail if "foundObstacle" else ready
	
	State stepFail{
		//["Duration=getDuration()"] 
		//forward mindrobot -m local_modelChanged : modelChanged(robot,h)	
		forward resourcemodel -m modelChange : modelChange(robot,h)		
		solve( wduration( TIME ) )
		["Duration=getCurSol(\"TIME\").toString().toLong()"]	

	}
	Goto goBackFromFail
	
	State goBackFromFail{
 		forward resourcemodel -m modelChange : modelChange(robot,s)  
 		["val Jal = Duration/4"]
 		delayVar Jal
  		forward resourcemodel -m modelChange : modelChange(robot,h) 
  		delayVar PauseTime 
		["replyToCaller(\"stepFail\", \"stepFail(obstacle,$Duration) \")"]
		
	}Goto ready
}