/* Generated by AN DISI Unibo */ 
package srcTest

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Tester ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	var messageRisp = "";
	fun getRobotStatus():String?{
		
			return messageRisp
	
	}
	
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Start tester Actor")
					}
					transition(edgeName="t00",targetState="handleResponse",cond=whenDispatch("modelRobotResponse"))
				}	 
		
		state("handleResponse") { //this:State
					action { //it:State
					
						if( checkMsgContent( Term.createTerm("modelRobotResponse(X,Y,O)"), Term.createTerm("modelRobotResponse(X,Y,O)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
								var X=payloadArg(0)
								var Y=payloadArg(1)
								var O=payloadArg(2)
								messageRisp="$X-$Y-$O"
						}
					}
					transition(edgeName="t00",targetState="handleResponse",cond=whenDispatch("modelRobotResponse"))
				
				}
				 
		}
	}
}
