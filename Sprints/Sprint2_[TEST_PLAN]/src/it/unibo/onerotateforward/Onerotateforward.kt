/* Generated by AN DISI Unibo */ 
package it.unibo.onerotateforward

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Onerotateforward ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var RealMove = "a"
				val CompleteRotateTime = 300L //RotateTime
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Start onerotateforward")
					}
					 transition( edgeName="goto",targetState="ready", cond=doswitch() )
				}	 
				state("ready") { //this:State
					action { //it:State
					}
					 transition(edgeName="t05",targetState="doRotationForward",cond=whenDispatch("onerotationstep"))
				}	 
				state("doRotationForward") { //this:State
					action { //it:State
						storeCurrentMessageForReply()
						if( checkMsgContent( Term.createTerm("onerotationstep(MOVE)"), Term.createTerm("onerotationstep(ORIENTATION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								RealMove = payloadArg(0)
						}
					}
					 transition( edgeName="goto",targetState="bigRotation", cond=doswitchGuarded({(RealMove=="a" || RealMove == "d")}) )
					transition( edgeName="goto",targetState="endDoRotationForward", cond=doswitchGuarded({! (RealMove=="a" || RealMove == "d")}) )
				}	 
				state("bigRotation") { //this:State
					action { //it:State
						if(RealMove=="a"){ forward("modelChange", "modelChange(robot,a)" ,"resourcemodel" ) 
						delay(CompleteRotateTime)
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
						 }
						if(RealMove=="d"){ forward("modelChange", "modelChange(robot,d)" ,"resourcemodel" ) 
						delay(CompleteRotateTime)
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
						 }
					}
					 transition( edgeName="goto",targetState="endDoRotationForward", cond=doswitch() )
				}	 
				state("endDoRotationForward") { //this:State
					action { //it:State
						if(RealMove=="a"){ forward("modelUpdate", "modelUpdate(robot,a)" ,"kb" ) 
						 }
						if(RealMove=="d"){ forward("modelUpdate", "modelUpdate(robot,d)" ,"kb" ) 
						 }
						replyToCaller("rotationOk", "rotationOk(0)")
					}
					 transition( edgeName="goto",targetState="ready", cond=doswitch() )
				}	 
			}
		}
}
