/* Generated by AN DISI Unibo */ 
package it.unibo.maitre

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Maitre ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var iter =0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Start maitre")
						forward("claibrationMsg", "claibrationMsg(Start)" ,"onerotateforward" ) 
						delay(100) 
					}
					 transition( edgeName="goto",targetState="go", cond=doswitch() )
				}	 
				state("go") { //this:State
					action { //it:State
						println("Send Start to explorer ")
						forward("testCmd", "testCmd(Start)" ,"explorer" ) 
						delay(6500) 
						forward("modelRequest", "modelRequest(robot,location)" ,"kb" ) 
						println("Waiting response ")
					}
					 transition(edgeName="t00",targetState="handleResponse",cond=whenDispatch("modelRobotResponse"))
					transition(edgeName="t01",targetState="handleResponse",cond=whenDispatch("modelErrorResponse"))
				}	 
				state("next") { //this:State
					action { //it:State
						if(iter==1){ println("Send Next to explorer (iter1) ")
						forward("testCmd", "testCmd(Next)" ,"explorer" ) 
						delay(6500) 
						 }
						if(iter==2){ println("Send Next to explorer (iter2) ")
						forward("testCmd", "testCmd(Next)" ,"explorer" ) 
						delay(6500) 
						 }
						forward("modelRequest", "modelRequest(robot,location)" ,"kb" ) 
						println("Waiting response ")
					}
					 transition(edgeName="t02",targetState="handleResponse",cond=whenDispatch("modelRobotResponse"))
					transition(edgeName="t03",targetState="handleResponse",cond=whenDispatch("modelErrorResponse"))
				}	 
				state("handleResponse") { //this:State
					action { //it:State
						
										iter = iter+1
						if( checkMsgContent( Term.createTerm("modelRobotResponse(X,Y,O)"), Term.createTerm("modelRobotResponse(X,Y,O)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var X=payloadArg(0)
												var Y=payloadArg(1)
												var O=payloadArg(2)
								println("----->Actual robot Pos: $X $Y $O")
						}
						if( checkMsgContent( Term.createTerm("modelErrorResponse(ERROR)"), Term.createTerm("modelErrorResponse(ERRORE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Errore-->Impossiible ottenere la posizione attuale del robot.")
						}
					}
					 transition( edgeName="goto",targetState="next", cond=doswitchGuarded({(iter<=2)}) )
					transition( edgeName="goto",targetState="end", cond=doswitchGuarded({! (iter<=2)}) )
				}	 
				state("end") { //this:State
					action { //it:State
						println("Sprint2 END :)")
					}
				}	 
			}
		}
}
