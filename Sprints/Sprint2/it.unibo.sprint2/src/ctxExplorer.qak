System system1d
mqttBroker "localhost" : 1883

Dispatch modelChange  : modelChange( TARGET, VALUE )  //force a resource-model change
Dispatch onestep       : onestep(DURATION)
Dispatch stepOk        : stepOk(V)		//TODO eliminate  V
Dispatch stepFail      : stepFail(R,T) //R=ok | obstacle, T = time

Event  sonarRobot     : sonar( DISTANCE )	     //from  sonar on robot 

Context ctxExplorer ip[host="localhost" port=8039] -mqtt
Context ctxDummy ip[host="dummyhost" port=9999] -mqtt //as resourceModel

ExternalQActor resourcemodel context ctxDummy

/*
 *  The goal is to move the robot to the fridge and let it come back 
 *  Fridge Position is given *a priori*
 */

QActor explorer context ctxExplorer{     
["
var fridge_position_x = 7;
var fridge_position_y = 0;

var goingHome  = false 
 
var Tback      = 0L

var stepCounter = 0 
var Curmove = \"\"
var curmoveIsForward = false
var StepTime   = 350L	//for virtual
var RotateTime = 300L	//for virtual
var PauseTime  = 250L 

var Direction = \"\" 


"]	
	State s0 initial {	
		println("&&&  explorer STARTED")
	    solve( consult("moves.pl")	 )
		run itunibo.planner.plannerUtil.initAI()
		println("INITIAL MAP")
 		run itunibo.planner.plannerUtil.showMap()
 		
 	}
	Goto  goToTheFridge
	
	/*
	 * 1)Go to the Fridge
	 */
	 
	State goToTheFridge{
 		solve( direction(D) )   
   		println("direction at start: ${getCurSol(\"D\").toString()}")
		run itunibo.planner.plannerUtil.showMap()		
		run itunibo.planner.plannerUtil.setGoal(fridge_position_x,fridge_position_y) // (6,0) should be Fridge Position
		["goingHome=false"]	
		run itunibo.planner.moveUtils.doPlan( myself )
 	} 	
 	
	Goto executePlannedActions  if "itunibo.planner.moveUtils.existPlan()" else endOfJob 
	/*
	 * 2) Execute the planned action, with attention to w the actions are stored in the actor-kb as a sequence of facts: move(M)
	 */
	
	State executePlannedActions{ 
		//solve( showMoves ) 
		solve( retract( move(M) ) ) //consume a move
		ifSolved {  
			["Curmove = getCurSol(\"M\").toString() 
              curmoveIsForward=(Curmove == \"w\")
	        "]
		} else { ["Curmove = \"\"; curmoveIsForward=false"]  }  
		//println("executePlannedActions doing $Curmove")
 	}
	Goto checkAndDoAction  if "(Curmove.length>0) " else goalOk 
 	
 	State goalOk{		  
 		println("ON THE TARGET CELL !!!")
// 		solve( curPos(X,Y) )
// 		println("curPos ${get}")
 	} 	
 	Goto atHome if "goingHome" else backToHome
 	
 	//Execute the move if it is a rotation or halt
	State checkAndDoAction{	 }
	Goto doForwardMove if "curmoveIsForward" else doTheMove
	
	State doTheMove{
//		if "Curmove==\"a\"" { forward resourcemodel -m modelChange : modelChange(robot,l) }
//		if "Curmove==\"d\"" { forward resourcemodel -m modelChange : modelChange(robot,r) }
//		run itunibo.planner.moveUtils.doPlannedMove(myself, Curmove)
  		forward resourcemodel -m modelChange : modelChange(robot,$Curmove) 
		delayVar RotateTime //rotate 
		forward resourcemodel -m modelChange : modelChange(robot,h) //stop
		run itunibo.planner.moveUtils.doPlannedMove(myself, Curmove)
 		delayVar PauseTime		
		//println("doTheMove DONE $Curmove")
 		//solve( dialog(F) )	//to CALIBRATE rotation time
	}
	Goto executePlannedActions 
	
	//Delegate a forward move to onecellforward
	State doForwardMove{
		run itunibo.planner.plannerUtil.startTimer()
		forward onecellforward -m onestep : onestep($StepTime)	
	}
	Transition t0   //whenMsg stopAppl -> stopApplication 
					whenMsg stepOk   -> handleStepOk   
					whenMsg stepFail -> hadleStepFail 
	 
	//onecellforward has completed 
	State handleStepOk{
		run itunibo.planner.moveUtils.doPlannedMove(myself, "w")	
		delayVar PauseTime	
	}
	Goto executePlannedActions
	
	State hadleStepFail{ 
		println("Fail stap :(")
		println("MAP when hadleStepFail")
			onMsg( stepFail:stepFail(R,D) ) {
				["Tback=payloadArg(1).toString().toLong()  
				 if( Tback > StepTime * 2 / 3 ) Tback = 0 else Tback=Tback/2
				"]
					println(" ..................................  BACK TIME= $Tback over $StepTime")
					if "Tback > 0 "{
						["Curmove=\"s\""]
				 		forward resourcemodel -m modelChange : modelChange(robot,$Curmove)  
						//run itunibo.planner.plannerUtil.doMove( "s" )    //NO UPDATE OD THE MAP
				 		delayVar Tback 
				  		forward resourcemodel -m modelChange : modelChange(robot,h) 
					}
			}
			
		run itunibo.planner.plannerUtil.showMap()	
		println("Replan and return at home.")
		delay 500
	}Goto backToHome
	
/*
 * Exploration step done: go back to home
 * If we use the planner - setGoal(0,0) - then the robot could 
 * find an obstacle in the return path
 */	 
	 
	State backToHome{
		
		println("&&&  backToHome")
 		solve( direction(D) )
   		println("direction at backToHome: ${getCurSol(\"D\").toString()}")
 		println("MAP BEFORE backToHome")
		run itunibo.planner.plannerUtil.showMap()	
		solve( retractall( move(_) ))		//clean the actor kb
 		run itunibo.planner.plannerUtil.setGoal(0,0)
 		["goingHome=true"]
 		run itunibo.planner.moveUtils.doPlan( myself )
 		run itunibo.planner.moveUtils.existPlan()//non so se sia negessario
 	} 
	Goto executePlannedActions //doGoHomeActions 
	
	State doGoHomeActions{ 
 		solve( retract( move(M) ) )
		ifSolved {  
			["Curmove = getCurSol(\"M\").toString() "] 
 			run itunibo.planner.moveUtils.doPlannedMove(myself, @M)
 			forward resourcemodel -m modelChange : modelChange(robot,$Curmove)
 			if "Curmove == \"w\" " {  delayVar StepTime } else { delayVar RotateTime }
			forward resourcemodel -m modelChange : modelChange(robot,h)
  			
		} else { ["Curmove = \"\" "] }
  		if "Curmove !== \"w\" " {solve( dialog(F) )}//to CALIBRATE rotation time
  		delayVar PauseTime		 
  	}
	Goto doGoHomeActions  if "(Curmove.length>0)" else atHome
	
	State atHome{  //reposition	
	println(" ---- AT HOME --- ")
 		solve( direction(D) )
 		["Direction = getCurSol(\"D\").toString() "]
		println( @D ) 
		["
val map = itunibo.planner.plannerUtil.getMap() 
println(map)
		"] 		
   		println("direction at home: ${getCurSol(\"D\").toString()}")
   		if "Direction == \"leftDir\" || Direction == \"upDir\" " {
   			forward resourcemodel -m modelChange : modelChange(robot,w)   	}	
	}
	Goto seeSud
	

	State seeSud{
		/*
		delayVar RotateTime
		//si dovrebbe mettere verso sud, non ruotare a sinistra.
		forward resourcemodel -m modelChange : modelChange(robot,a)
		//run itunibo.planner.plannerUtil.getDuration()		
		
		*/
		
		["Curmove=\"a\""]
		delayVar StepTime
		forward resourcemodel -m modelChange : modelChange(robot,$Curmove) //
   		run itunibo.planner.moveUtils.doPlannedMove(myself, Curmove)
   		delayVar RotateTime
		
		forward resourcemodel -m modelChange : modelChange(robot,h)			
		solve( direction(D) )
		["Direction = getCurSol(\"D\").toString() "]
		println("--->$Direction")
	}
	//Goto seeSud  if "(Direction!=\"downDir\")" else needInit
	Goto seeSud  if "(Direction!=\"downDir\")" else endOfJob
	

	State endOfJob{
		println("END")
	}
}	

//Application move step
QActor onecellforward context ctxExplorer {
[" var foundObstacle = false; var StepTime = 0L"]  
	State s0 initial {	   
		["foundObstacle = false "]
	} 
	Transition t0 whenMsg onestep -> doMoveForward
	
	State doMoveForward{		  
		onMsg( onestep : onestep( TIME ) ) {
			["StepTime = payloadArg(0).toLong()"]
			forward resourcemodel -m modelChange : modelChange(robot,w)
			run itunibo.planner.plannerUtil.startTimer()
		}
	} 
	Transition t0 whenTimeVar  StepTime -> endDoMoveForward		
 		          whenEvent sonarRobot  -> handleSonarRobot
		  
	State endDoMoveForward{
		forward resourcemodel -m modelChange : modelChange(robot,h)
		forward explorer -m stepOk : stepOk(ok)  //answer
	}
	Goto s0
	
	//Substitute with an ad-hoc actor for a real robot
	State handleSonarRobot{  //before than the step time
		run itunibo.planner.moveUtils.setDuration(myself)
		printCurrentMessage
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){     
			["val distance = Integer.parseInt( payloadArg(0) ) 
              foundObstacle = (distance<20) "]  
   		}
	}
	Goto stepFail if "foundObstacle" else s0
	
	State stepFail{
		println("&&& onecellforward stepfail ")
		solve( wduration( TIME ) )
		forward explorer -m stepFail : stepFail(obstacle,#TIME)  	
	}
	Goto s0
}    

