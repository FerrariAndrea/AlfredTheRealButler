System analisi 
mqttBroker "localhost" : 1883

Event  envCond        : envCond( CONDTYPE )        //from the environment 
Event  sonarRobot     : sonar( DISTANCE )	     //from  sonar on robot 
Event  sonar          : sonar(SONAR, DISTANCE)	 //from sonar in the robot environment          
Event  polar          : p( Distance, Angle ) 

Event  modelContent   : content( VALUE ) 

Dispatch robotCmd     : robotCmd( CMD )				  //sent by the mind to the basicrobot

Dispatch modelChange  : modelChange( TARGET, VALUE )  //force a resource-model change
Dispatch modelUpdate  : modelUpdate( TARGET, VALUE )  //sent by the mind
Dispatch modelChanged : modelChanged(TARGET, VALUE)
 
Dispatch kbModelUpdate  : kbModelUpdate( TARGET, VALUE )  //force a resource-model change

 
 
 
Dispatch stopAppl      : stopAppl( CMD )
Dispatch startAppl     : startAppl( CMD )

Context ctxRobot ip[host="localhost" port=8038] -mqtt
Context ctxMaitre ip[host="localhost" port=8035] -mqtt // forse non  "localhost" ma "otherresourcelocalhost"
Context ctxResourceModel ip[host="localhost" port=8036] -mqtt 


ExternalQActor tester context ctxRobot//FOR TEST

QActor maitre context ctxMaitre{
	State s0 initial{
		println("Start maitre")	
		delay 4000	
	}Goto cmd1
	
	State cmd1{
		forward resourcemodel -m  modelChange :  modelChange(robot, w) 		
	}
}


QActor basicrobot context ctxRobot{
	
	State s0 initial {
		println("Start basicrobot")		
	}Goto waitCmd
	
	State waitCmd{}Transition t0  whenMsg   robotCmd  -> handleRobotCmd
	
	State handleRobotCmd{ //does not handle alarms 
		//printCurrentMessage 
		onMsg( robotCmd : robotCmd( MOVE ) ) { //MOVE = w | a | s | d | h
			["
				var Mossa = payloadArg(0)
			"]
			["val ForTest = \"basicrobot[$Mossa]\""]
			emit modelContent : content($ForTest)//FOR TEST
			println("move-->$Mossa")
		}	
 	}  
	Goto waitCmd
	
	
}

QActor mindrobot context ctxRobot{
	["var Curmove = \"\""]
	State s0 initial {
		println("Start mindrobot")		
	}Goto wait
	State wait{}Transition t0  whenMsg   modelChanged  -> handleRobotCmd
	State handleRobotCmd{ //does not handle alarms 
		//printCurrentMessage 
		onMsg(  modelChanged:  modelChanged( TARGET, VALUE ) ) { //MOVE = w | a | s | d | h
			["				
				var Val0 = payloadArg(0)
				var Val1 = payloadArg(1)
			"]
			["val ForTest = \"mindrobot[$Val1]\""]
			emit modelContent : content($ForTest)//FOR TEST
			forward basicrobot -m  robotCmd :  robotCmd($Val1) 
			//in questo modo posso controllare che il robotCmd sia andato a buon fine
			//ed aggiornare di conseguenza la base di conoscenza
			println("robotCmd->smistato")
			forward resourcemodel -m  modelUpdate :  modelUpdate($Val0,$Val1) 
		}	
 	}  
	Goto wait 
}



QActor fridge context ctxRobot{
	State s0 initial {
		println("Start fridge")	
	}
}



QActor resourcemodel context ctxResourceModel{
	State s0 initial {
		println("Start resourcemodel")		
		
		
	}Goto wait
	
	
	
	State wait{}Transition t0  whenMsg   modelUpdate  -> handleUpdate
	 				 whenMsg   modelChange  -> handleChange 
	 				 
	State handleUpdate  {
		onMsg(  modelUpdate:  modelUpdate( TARGET, VALUE ) ) { 
			["
				var Target=payloadArg(0)
				var Value=payloadArg(1)
			"]
			["val ForTest = \"resourcesModelUpdate[$Value]\""]
			emit modelContent : content($ForTest)//FOR TEST
			println("resourcemodel->richiesta salvataggio modifica a kb(persistenza): $Target , $Value")
			forward kb -m  kbModelUpdate :  kbModelUpdate($Target , $Value )
			println("resourcemodel->Propagazione modifica (esempio tramite coap): $Target , $Value") 
		}		
	}Goto wait
	
	State handleChange  {
		onMsg(  modelChange:  modelChange( TARGET, VALUE ) ) { 
			["
				var Target=payloadArg(0)
				var Value=payloadArg(1)
			"]
			println("resourcemodel->applicazione modifica: $Target , $Value (esempio spostamento robot)")
			["val ForTest = \"resourcesModelChange[$Value]\""]
			emit modelContent : content($ForTest)//FOR TEST
			forward mindrobot -m  modelChanged :  modelChanged($Target , $Value )
		}		
	}Goto wait
	
}
QActor kb context ctxResourceModel{
		State s0 initial {
		println("Start kb")		
	}
	Transition t0  whenMsg   kbModelUpdate  -> handleUpdate
	
	State handleUpdate  {
		onMsg(  kbModelUpdate:  kbModelUpdate( TARGET, VALUE ) ) { 
		
			["
				var Target=payloadArg(0)
				var Value=payloadArg(1)
			"]
			["val ForTest = \"KB[$Value]\""]
			emit modelContent : content($ForTest)//FOR TEST
			println("KB->modello cambiato: $Target , $Value")
		}		
	}
}
