/* Generated by AN DISI Unibo */ 
package it.unibo.tester

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Tester ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
	var messageRisp: String = ""
	var ready:Int= 0
	
	fun getFlux():String?{
			ready=0
			return messageRisp	
	}
	
	fun isReady():Int{
		return ready;
	}
	
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Start tester")
					}
					 transition(edgeName="t05",targetState="handleTester",cond=whenEvent("modelContent"))
				}	 
				state("handleTester") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("content(VALUE)"), Term.createTerm("content(VALUE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
							println("CATTURATO")
							messageRisp=payloadArg(0)
							ready=1
						}
					}
					 transition(edgeName="t06",targetState="handleTester",cond=whenEvent("modelContent"))
				}	 
			}
		}
}
