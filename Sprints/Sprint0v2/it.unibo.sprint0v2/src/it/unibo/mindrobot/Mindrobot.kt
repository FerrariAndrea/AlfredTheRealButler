/* Generated by AN DISI Unibo */ 
package it.unibo.mindrobot

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Mindrobot ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var Curmove = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Start mindrobot")
					}
					 transition(edgeName="t01",targetState="handleRobotCmd",cond=whenDispatch("modelChange"))
				}	 
				state("handleRobotCmd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("modelChange(TARGET,VALUE)"), Term.createTerm("modelChange(TARGET,VALUE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
												
												var Val0 = payloadArg(0)
												var Val1 = payloadArg(1)
								val ForTest = "mindrobot[$Val1]"
								emit("modelContent", "content($ForTest)" ) 
								forward("robotCmd", "robotCmd($Val1)" ,"basicrobot" ) 
								println("robotCmd->smistato")
								forward("modelUpdate", "modelUpdate($Val0,$Val1)" ,"resourcemodel" ) 
						}
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
