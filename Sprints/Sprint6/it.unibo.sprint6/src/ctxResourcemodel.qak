System system2
mqttBroker "localhost" : 1883

Dispatch local_modelChanged   : modelChanged( TARGET, VALUE )

Dispatch modelChange  : modelChange( TARGET, VALUE )  //force a resource-model change
Dispatch modelUpdate  : modelUpdate( TARGET, VALUE )  //sent by the mind
Dispatch modelUpdateMap  : modelUpdateMap( NAME,X,Y )
 
 //richieste
 Dispatch modelRequest : modelRequest( TARGET,PROP) 
 //risposte 
 Dispatch modelRobotResponse : modelRobotResponse( X,Y,O ) 
 Dispatch modelMapResponse : modelMapResponse( X,Y ) 
 Dispatch modelErrorResponse : modelErrorResponse( ERROR )
 
//Dispatch kbModelUpdate  : kbModelUpdate( TARGET, VALUE )  //force a resource-model change
 

Context ctxDummy ip[host="dummyhost" port=9999] -mqtt 
Context ctxResourceModel ip[host="localhost" port=8036] -mqtt

//ExternalQActor maitre context ctxDummy
ExternalQActor mindrobot context ctxDummy


QActor resourcemodel context ctxResourceModel {
	["var dobackstep = false"]
	State s0 initial {
		println("Start resourcemodel")
		solve( consult("sysRules.pl")	 )       
		solve( consult("resourceModel.pl")	 )
		solve( showResourceModel ) 		
		run itunibo.coap.modelResourceCoap.create( myself, "resourcemodel", 5683 ) //CoAP access
		
	
	}
	Goto waitModelChange


	State waitModelChange{ }
	Transition t0 whenMsg modelChange -> changeModel
	              whenMsg modelUpdate -> updateModel

	State updateModel  {
		onMsg( modelUpdate : modelUpdate(robot,V ) ) {
			run itunibo.robot.resourceModelSupport.updateRobotModel( myself, payloadArg(1) )
		}
		onMsg( modelUpdate : modelUpdate(sonarRobot,V ) ) {
			run itunibo.robot.resourceModelSupport.updateSonarRobotModel( myself, payloadArg(1) )
		}
		//Messaggi di fine missione per il metre (frontend)
		onMsg( modelUpdate : modelUpdate(metre,V ) ) {
			run itunibo.robot.resourceModelSupport.updateMetreModel( myself, payloadArg(1) )
		}
		onMsg( modelUpdate : modelUpdate(pos,V ) ) {
			run itunibo.robot.resourceModelSupport.updatePosRobotModel( myself, payloadArg(1) )
			//emit posRobot : posRobot($payloadArg(1))
		}
	}	
	Goto  waitModelChange
	
	//questo è da togliere siccome c'è l'attore kb che gestisce la persistenza
	State changeModel {
		//printCurrentMessage 
		//ROBOT MOVE
		onMsg( modelChange : modelChange( robot,V ) ) { // V= w | ...
			//run itunibo.robot.resourceModelSupport.updateRobotModel( myself, payloadArg(1) )
			forward mindrobot -m local_modelChanged : modelChanged(  robot,  $payloadArg(1))  //for the robotmind
			//forward kb -m modelUpdate : modelUpdate(  robot,  $payloadArg(1))  //for kb
		}
		/*
		 // Start and stop msg  (richiesta comando)
		onMsg( modelChange : modelChange( metre,CMD) ) {
			forward mindrobot -m local_modelChanged : modelChanged(  metre,  $payloadArg(1)) 
		} 
		onMsg( modelChange : modelChange(robotPos,V ) ) {
			println("---------------->ola")
			forward mindrobot -m local_modelChanged : modelChanged(  robotPos,  $payloadArg(1)) 		
		}
		*/
	}
	Goto  waitModelChange
}


QActor kb context ctxResourceModel{
	
	State s0 initial {
		println("Start kb")	
		solve( consult("robotPosResolver.pl") )
	}
	Transition t0  whenMsg   modelUpdate  -> handle
					whenMsg   modelRequest  -> handle					
		 			whenMsg modelUpdateMap -> handle
	State handle  {
		["storeCurrentMessageForReply()"]  
		//tengo un solo handle sperando così di non perdere i messaggi di un tipo mentre servo i messagig dell'altro tipo
		//sperando che rimangano tutti in coda a questo stato (se ho capito bene come funzionano gli stati dei qak)
		onMsg(   modelRequest:  modelRequest(TARGET,PROP) ) { 
		
			["
				var Target=payloadArg(0)
				var Prop=payloadArg(1)
			"]
			if "Target==\"robot\" && Prop==\"location\""{
				solve(actualRobotPos(X,Y,O))
				ifSolved { 					
					["
						var X = getCurSol(\"X\").toString()
						var Y = getCurSol(\"Y\").toString()
						var O = getCurSol(\"O\").toString()
					"]
					["replyToCaller(\"modelRobotResponse\", \"modelRobotResponse( $X,$Y,$O )\")"]
				}else{
					["replyToCaller(\"modelErrorResponse\", \"modelErrorResponse(-1)\")"]
				
				}
			}
			if "Target==\"map\""{
				solve(pos($Prop,X,Y))
				ifSolved { 					
					["
						var X = getCurSol(\"X\").toString()
						var Y = getCurSol(\"Y\").toString()
					"]
					["replyToCaller(\"modelMapResponse\", \"modelMapResponse( $X,$Y )\")"]
				}else{
					["replyToCaller(\"modelErrorResponse\", \"modelErrorResponse(-1)\")"]
				
				}
			}
		
		}
		onMsg(  modelUpdate:  modelUpdate( TARGET, VALUE ) ) { 
		
			["
				var Target=payloadArg(0)
				var Value=payloadArg(1)
				
			"]
			if "Target==\"robot\""{
				solve(updateRobotStateFromMove($Value))	
				//per il front-end
				solve(actualRobotPos(X,Y,O))
				ifSolved { 			
					["val Position =  \"X\"+getCurSol(\"X\").toString()+\"Y\"+getCurSol(\"Y\").toString()+\"O\"+getCurSol(\"O\").toString()"]	
					forward resourcemodel -m modelUpdate : modelUpdate(pos,$Position)
				}
									 		
			}
			/*		
			if "Target==\"map\""{
				["val Temp =Value.split(\"X\");val Name =Temp[2];val Y=Temp[1]; val X=Temp[0]"]
				
				println("----------->RICEVUTO MESSAGGIO $Value")
				solve(updatePos(pos($Name,$X,$Y)))
				solve(pos(table,X,Y))
				ifSolved { 					
					["
						var Xt = getCurSol(\"X\").toString()
						var Yt = getCurSol(\"Y\").toString()
					"]
					println("$Xt $Yt")
					}else{
						println("not good :(")
					}					
			}
			*/
					
		}	
		onMsg(  modelUpdateMap:  modelUpdateMap(  NAME,X,Y ) ) { 
		
			["
				var Name=payloadArg(0)
				var X=payloadArg(1)
				var Y=payloadArg(2)
			"]
			println("hereee-->$Name $X $Y")
			solve(updatePos($Name,$X,$Y))
			/*
				solve(pos(table,X,Y))
				ifSolved { 					
					["
						var Xt = getCurSol(\"X\").toString()
						var Yt = getCurSol(\"Y\").toString()
					"]
						println("$Xt $Yt")
					}else{
						println("not good :(")
					}	
			 */		
		}	
		
	}Transition t0  whenMsg   modelUpdate  -> handle
					whenMsg   modelRequest  -> handle
					whenMsg modelUpdateMap -> handle
	
	
	
}
