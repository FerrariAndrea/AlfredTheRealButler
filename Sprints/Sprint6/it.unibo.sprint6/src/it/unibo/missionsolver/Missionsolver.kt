/* Generated by AN DISI Unibo */ 
package it.unibo.missionsolver

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Missionsolver ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
			
			var addingFood = false
			var preparing = false
			var clearing = false
			var goingHome = false
		
			var goTable = false
			var goHome = false
			var goFridge = false
			var goPantry = false
			var goDishwasher = false
		
			// For Smart devices
			var selectedFood = -1
			var quantityFood = -1
			var quantityDish = -1
		
			var tableReachedForClearing = false
			var takeFoodFridge = false
			var putFoodFridge = false
			var takeDishPantry = false
			var putDishDishwasher = false
			
			//
			var ActualMissionName =""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Actor: Mission Solver; State: initial")
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						println("Waiting for mission... Please send an action!")
					}
					 transition(edgeName="t00",targetState="addingFood",cond=whenEvent("addFood"))
					transition(edgeName="t01",targetState="preparingRoom",cond=whenEvent("prepare"))
					transition(edgeName="t02",targetState="clearingRoom",cond=whenEvent("clear"))
					transition(edgeName="t03",targetState="home",cond=whenEvent("home"))
				}	 
				state("addingFood") { //this:State
					action { //it:State
						storeCurrentMessageForReply()
						println("ADDING FOOD: Go to Fridge")
						
								  ActualMissionName="AddFood"
								  addingFood = true
								  preparing = false
								  clearing = false
								  goFridge = true
								  goTable = true
								  goHome = true
								  goDishwasher = false
								  goPantry = false
								  takeFoodFridge = true
						if( checkMsgContent( Term.createTerm("addFood(X,Q)"), Term.createTerm("addFood(X,Q)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								selectedFood = payloadArg(0).toInt()
								quantityFood = payloadArg(1).toInt()
						}
					}
					 transition( edgeName="goto",targetState="checkAddingFood", cond=doswitch() )
				}	 
				state("preparingRoom") { //this:State
					action { //it:State
						storeCurrentMessageForReply()
						println("PREPARING: Go to Pantry")
						
						 		  ActualMissionName="PreparingRoom"
								  addingFood = false
								  preparing = true
								  clearing = false
									//---
								  goFridge = true
								  goTable = true
								  goHome = true
								  goDishwasher = false
								  goPantry = true
								  takeFoodFridge = true
								  takeDishPantry = true 
					}
					 transition( edgeName="goto",targetState="goToPantry", cond=doswitch() )
				}	 
				state("clearingRoom") { //this:State
					action { //it:State
						storeCurrentMessageForReply()
						println("ADDING FOOD: Go to Table")
						ActualMissionName="ClearingRoom"
								  addingFood = false
								  preparing = false
								  clearing = true
								  goFridge = true
								  goTable = true
								  goHome = true
								  goDishwasher = true
								  goPantry = false
								  putDishDishwasher = false
								  putFoodFridge = false
								  tableReachedForClearing = true
					}
					 transition( edgeName="goto",targetState="goToTable", cond=doswitch() )
				}	 
				state("home") { //this:State
					action { //it:State
						storeCurrentMessageForReply()
						println("GO HOME: Go to Home")
						ActualMissionName="GoToHome"
								  addingFood = false
								  preparing = false
								  clearing = false
								  goFridge = false
								  goTable = false
								  goHome = false
								  goDishwasher = false
								  goPantry = false
					}
					 transition( edgeName="goto",targetState="goToHome", cond=doswitch() )
				}	 
				state("goToFridge") { //this:State
					action { //it:State
						goFridge = false
						forward("modelRequest", "modelRequest(map,fridge)" ,"kb" ) 
					}
					 transition(edgeName="t04",targetState="handlePos",cond=whenDispatch("modelMapResponse"))
				}	 
				state("goToPantry") { //this:State
					action { //it:State
						goPantry = false
						forward("modelRequest", "modelRequest(map,pantry)" ,"kb" ) 
					}
					 transition(edgeName="t05",targetState="handlePos",cond=whenDispatch("modelMapResponse"))
				}	 
				state("goToDishwasher") { //this:State
					action { //it:State
						goDishwasher = false
						forward("modelRequest", "modelRequest(map,dishwasher)" ,"kb" ) 
					}
					 transition(edgeName="t06",targetState="handlePos",cond=whenDispatch("modelMapResponse"))
				}	 
				state("goToTable") { //this:State
					action { //it:State
						goTable = false
						forward("modelRequest", "modelRequest(map,table)" ,"kb" ) 
					}
					 transition(edgeName="t07",targetState="handlePos",cond=whenDispatch("modelMapResponse"))
				}	 
				state("goToHome") { //this:State
					action { //it:State
						forward("modelRequest", "modelRequest(map,home)" ,"kb" ) 
						goHome = false
					}
					 transition(edgeName="t08",targetState="handlePos",cond=whenDispatch("modelMapResponse"))
				}	 
				state("handlePos") { //this:State
					action { //it:State
						var X=0;var Y=0;
						if( checkMsgContent( Term.createTerm("modelMapResponse(X,Y)"), Term.createTerm("modelMapResponse(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								X=payloadArg(0).toInt();Y=payloadArg(1).toInt()
						}
						forward("goTo", "goTo($X,$Y)" ,"explorer" ) 
					}
					 transition(edgeName="t09",targetState="goalOk",cond=whenDispatch("goToOk"))
					transition(edgeName="t010",targetState="fail",cond=whenDispatch("goToFail"))
				}	 
				state("fail") { //this:State
					action { //it:State
						println("WARNING: Explorer: fail.")
						val Resp = "Fail$ActualMissionName"
						forward("modelUpdate", "modelUpdate(metre,$Resp)" ,"resourcemodel" ) 
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("goalOk") { //this:State
					action { //it:State
						println("Explorer: on the target cell (simulate action 1.5s)!")
						delay(1500) 
						println("CONDITIONS: PUT_FOOD_FRIDGE: $putFoodFridge")
						println("CONDITIONS: TAKE_FOOD_FRIDGE: $takeFoodFridge")
						println("CONDITIONS: PUT_DISH_DISHWASHER: $putDishDishwasher")
						println("CONDITIONS: TAKE_DISH_PANTRY: $takeDishPantry")
						println("CONDITIONS: TABLE_REACHED_FOR_CLEARING: $tableReachedForClearing")
						if(tableReachedForClearing){ 
										tableReachedForClearing = false;
										putFoodFridge = true;
						 }
						else
						 { if(putFoodFridge){ forward("putFood", "putFood(1,5)" ,"fridge" ) 
						 putFoodFridge = false;
						 putDishDishwasher = true
						  }
						 else
						  { if(putDishDishwasher){ forward("putDish", "putDish(20)" ,"dishwasher" ) 
						  putDishDishwasher = false
						   }
						   }
						 if(takeDishPantry){ forward("takeDish", "takeDish(20)" ,"pantry" ) 
						 takeDishPantry = false
						  }
						 else
						  { if(takeFoodFridge){ var X = selectedFood; var Q = quantityFood
						  					if (X == -1 && Q == -1) {
						  						X = 1; Q = 10;
						  					}
						  forward("takeFood", "takeFood($X,$Q)" ,"fridge" ) 
						  selectedFood = -1; quantityFood = -1;
						  takeFoodFridge = false
						   }
						   }
						  }
					}
					 transition( edgeName="goto",targetState="checkAddingFood", cond=doswitch() )
				}	 
				state("checkAddingFood") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="checkGoFridgeAF", cond=doswitchGuarded({addingFood}) )
					transition( edgeName="goto",targetState="checkPreparingRoom", cond=doswitchGuarded({! addingFood}) )
				}	 
				state("checkPreparingRoom") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="checkGoPantryPR", cond=doswitchGuarded({preparing}) )
					transition( edgeName="goto",targetState="checkClearingRoom", cond=doswitchGuarded({! preparing}) )
				}	 
				state("checkClearingRoom") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="checkGoTableCR", cond=doswitchGuarded({clearing}) )
					transition( edgeName="goto",targetState="reply", cond=doswitchGuarded({! clearing}) )
				}	 
				state("checkGoFridgeAF") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToFridge", cond=doswitchGuarded({goFridge}) )
					transition( edgeName="goto",targetState="checkGoTableAF", cond=doswitchGuarded({! goFridge}) )
				}	 
				state("checkGoTableAF") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToTable", cond=doswitchGuarded({goTable}) )
					transition( edgeName="goto",targetState="checkGoHomeAF", cond=doswitchGuarded({! goTable}) )
				}	 
				state("checkGoHomeAF") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToHome", cond=doswitchGuarded({goHome}) )
					transition( edgeName="goto",targetState="reply", cond=doswitchGuarded({! goHome}) )
				}	 
				state("checkGoPantryPR") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToPantry", cond=doswitchGuarded({goPantry}) )
					transition( edgeName="goto",targetState="checkGoFridgePR", cond=doswitchGuarded({! goPantry}) )
				}	 
				state("checkGoFridgePR") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToFridge", cond=doswitchGuarded({goFridge}) )
					transition( edgeName="goto",targetState="checkGoTablePR", cond=doswitchGuarded({! goFridge}) )
				}	 
				state("checkGoTablePR") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToTable", cond=doswitchGuarded({goTable}) )
					transition( edgeName="goto",targetState="checkGoHomePR", cond=doswitchGuarded({! goTable}) )
				}	 
				state("checkGoHomePR") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToHome", cond=doswitchGuarded({goHome}) )
					transition( edgeName="goto",targetState="reply", cond=doswitchGuarded({! goHome}) )
				}	 
				state("checkGoTableCR") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToTable", cond=doswitchGuarded({goTable}) )
					transition( edgeName="goto",targetState="checkGoFridgeCR", cond=doswitchGuarded({! goTable}) )
				}	 
				state("checkGoFridgeCR") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToFridge", cond=doswitchGuarded({goFridge}) )
					transition( edgeName="goto",targetState="checkGoDishwasherCR", cond=doswitchGuarded({! goFridge}) )
				}	 
				state("checkGoDishwasherCR") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToDishwasher", cond=doswitchGuarded({goDishwasher}) )
					transition( edgeName="goto",targetState="checkGoHomeCR", cond=doswitchGuarded({! goDishwasher}) )
				}	 
				state("checkGoHomeCR") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="goToHome", cond=doswitchGuarded({goHome}) )
					transition( edgeName="goto",targetState="reply", cond=doswitchGuarded({! goHome}) )
				}	 
				state("reply") { //this:State
					action { //it:State
						val Resp = "Ok$ActualMissionName"
						forward("modelUpdate", "modelUpdate(metre,$Resp)" ,"resourcemodel" ) 
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
}
