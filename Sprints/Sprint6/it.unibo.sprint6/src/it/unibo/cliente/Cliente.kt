/* Generated by AN DISI Unibo */ 
package it.unibo.cliente

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Cliente ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("init client")
					}
					 transition( edgeName="goto",targetState="ask", cond=doswitch() )
				}	 
				state("ask") { //this:State
					action { //it:State
						forward("richiesta", "richiesta(PayloadReq)" ,"server" ) 
					}
					 transition(edgeName="t0",targetState="waitReps",cond=whenDispatch("risposta"))
				}	 
				state("waitReps") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("risposta(PAYLOAD)"), Term.createTerm("risposta(PayloadRes)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("res: ${payloadArg(0)}")
						}
					}
				}	 
			}
		}
}
