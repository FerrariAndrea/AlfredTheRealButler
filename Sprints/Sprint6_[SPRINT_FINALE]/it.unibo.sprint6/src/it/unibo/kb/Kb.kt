/* Generated by AN DISI Unibo */ 
package it.unibo.kb

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Kb ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Start kb")
						solve("consult('robotPosResolver.pl')","") //set resVar	
					}
					 transition(edgeName="t02",targetState="handle",cond=whenDispatch("modelUpdate"))
					transition(edgeName="t03",targetState="handle",cond=whenDispatch("modelRequest"))
					transition(edgeName="t04",targetState="handle",cond=whenDispatch("modelUpdateMap"))
				}	 
				state("handle") { //this:State
					action { //it:State
						storeCurrentMessageForReply()
						if( checkMsgContent( Term.createTerm("modelRequest(TARGET,PROP)"), Term.createTerm("modelRequest(TARGET,PROP)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var Target=payloadArg(0)
												var Prop=payloadArg(1)
								if(Target=="robot" && Prop=="location"){ solve("actualRobotPos(X,Y,O)","") //set resVar	
								if(currentSolution.isSuccess()) { 
														var X = getCurSol("X").toString()
														var Y = getCurSol("Y").toString()
														var O = getCurSol("O").toString()
								replyToCaller("modelRobotResponse", "modelRobotResponse( $X,$Y,$O )")
								 }
								else
								{ replyToCaller("modelErrorResponse", "modelErrorResponse(-1)")
								 }
								 }
								if(Target=="map"){ solve("pos($Prop,X,Y)","") //set resVar	
								if(currentSolution.isSuccess()) { 
														var X = getCurSol("X").toString()
														var Y = getCurSol("Y").toString()
								replyToCaller("modelMapResponse", "modelMapResponse( $X,$Y )")
								 }
								else
								{ replyToCaller("modelErrorResponse", "modelErrorResponse(-1)")
								 }
								 }
						}
						if( checkMsgContent( Term.createTerm("modelUpdate(TARGET,VALUE)"), Term.createTerm("modelUpdate(TARGET,VALUE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var Target=payloadArg(0)
												var Value=payloadArg(1)
												
								if(Target=="robot"){ solve("updateRobotStateFromMove($Value)","") //set resVar	
								solve("actualRobotPos(X,Y,O)","") //set resVar	
								if(currentSolution.isSuccess()) { val Position =  "X"+getCurSol("X").toString()+"Y"+getCurSol("Y").toString()+"O"+getCurSol("O").toString()
								forward("modelUpdate", "modelUpdate(pos,$Position)" ,"resourcemodel" ) 
								 }
								 }
						}
						if( checkMsgContent( Term.createTerm("modelUpdateMap(NAME,X,Y)"), Term.createTerm("modelUpdateMap(NAME,X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var Name=payloadArg(0)
												var X=payloadArg(1)
												var Y=payloadArg(2)
								println("hereee-->$Name $X $Y")
								solve("updatePos($Name,$X,$Y)","") //set resVar	
						}
					}
					 transition(edgeName="t05",targetState="handle",cond=whenDispatch("modelUpdate"))
					transition(edgeName="t06",targetState="handle",cond=whenDispatch("modelRequest"))
					transition(edgeName="t07",targetState="handle",cond=whenDispatch("modelUpdateMap"))
				}	 
			}
		}
}
