/* Generated by AN DISI Unibo */ 
package it.unibo.sonarcollector

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonarcollector ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val minCount = 3
				var SonarW :IntArray= IntArray(3)
				var SonarL :IntArray= IntArray(3)
				var SonarR :IntArray= IntArray(3)
				var CountW :Int=0
				var CountL :Int=0
				var CountR :Int=0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Start sonarcollector")
					}
					 transition(edgeName="t05",targetState="handleReq",cond=whenDispatch("internalSonarReq"))
				}	 
				state("handleReq") { //this:State
					action { //it:State
						
									storeCurrentMessageForReply()
									 CountW =0
									 CountL =0
									 CountR =0
					}
					 transition( edgeName="goto",targetState="needCollect", cond=doswitch() )
				}	 
				state("collect") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("sonar(DISTANCE)"), Term.createTerm("sonar(DISTANCE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(CountW<minCount){ SonarW[CountW]=payloadArg(0).toInt();CountW++;
								 }
						}
						if( checkMsgContent( Term.createTerm("sonarLeft(DISTANCE)"), Term.createTerm("sonarLeft(DISTANCE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(CountL<minCount){ SonarL[CountL]=payloadArg(0).toInt();CountL++;
								 }
						}
						if( checkMsgContent( Term.createTerm("sonarRight(DISTANCE)"), Term.createTerm("sonarRight(DISTANCE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(CountR<minCount){ SonarR[CountR]=payloadArg(0).toInt();CountR++;
								 }
						}
					}
					 transition( edgeName="goto",targetState="response", cond=doswitchGuarded({(CountW>=minCount && CountL>=minCount && CountR>=minCount)}) )
					transition( edgeName="goto",targetState="needCollect", cond=doswitchGuarded({! (CountW>=minCount && CountL>=minCount && CountR>=minCount)}) )
				}	 
				state("needCollect") { //this:State
					action { //it:State
					}
					 transition(edgeName="t06",targetState="collect",cond=whenEvent("sonarRobot"))
					transition(edgeName="t07",targetState="collect",cond=whenEvent("sonarLeft"))
					transition(edgeName="t08",targetState="collect",cond=whenEvent("sonarRight"))
				}	 
				state("response") { //this:State
					action { //it:State
								
						 			SonarW.sort();SonarR.sort(); SonarL.sort()
									val medianaW = SonarW[minCount/3]
									val medianaR = SonarR[minCount/3]
									val medianaL = SonarL[minCount/3]
									replyToCaller("internalSonarRes", "internalSonarRes($medianaW,$medianaR,$medianaL)")
					}
					 transition(edgeName="t09",targetState="handleReq",cond=whenDispatch("internalSonarReq"))
				}	 
			}
		}
}
