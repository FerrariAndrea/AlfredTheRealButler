/* Generated by AN DISI Unibo */ 
package it.unibo.server

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Server ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("init server")
					}
					 transition(edgeName="t1",targetState="servi",cond=whenDispatch("richiesta"))
				}	 
				state("servi") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("richiesta(PAYLOAD)"), Term.createTerm("richiesta(PayloadReq)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("req: ${payloadArg(0)}")
								forward("risposta", "risposta(PayloadRes)" ,"server" ) 
						}
					}
					 transition(edgeName="s2",targetState="servi",cond=whenDispatch("richiesta"))
				}	 
			}
		}
}
