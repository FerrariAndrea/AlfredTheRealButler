/* Generated by AN DISI Unibo */ 
package it.unibo.onecellforward

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Onecellforward ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var foundObstacle = false
				var StepTime = 0L
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						foundObstacle = false 
					}
					 transition(edgeName="t05",targetState="doMoveForward",cond=whenDispatch("onestep"))
				}	 
				state("doMoveForward") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("onestep(DURATION)"), Term.createTerm("onestep(TIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								StepTime = payloadArg(0).toLong()
								forward("local_modelChanged", "modelChanged(robot,w)" ,"mindrobot" ) 
								forward("setTimer", "setTimer($StepTime)" ,"timer" ) 
								itunibo.planner.plannerUtil.startTimer(  )
						}
					}
					 transition(edgeName="t06",targetState="endDoMoveForward",cond=whenEvent("tickTimer"))
					transition(edgeName="t07",targetState="handleSonarRobot",cond=whenEvent("sonarRobot"))
				}	 
				state("endDoMoveForward") { //this:State
					action { //it:State
						forward("local_modelChanged", "modelChanged(robot,h)" ,"mindrobot" ) 
						forward("stepOk", "stepOk(ok)" ,"controller" ) 
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("handleSonarRobot") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						itunibo.planner.moveUtils.setDuration(myself)
						if( checkMsgContent( Term.createTerm("sonar(DISTANCE)"), Term.createTerm("sonar(DISTANCE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val distance = Integer.parseInt( payloadArg(0) ) 
								              foundObstacle = (distance<20) 
								println("SONAR-->$distance")
						}
					}
					 transition( edgeName="goto",targetState="stepFail", cond=doswitchGuarded({foundObstacle}) )
					transition( edgeName="goto",targetState="mustGoOn", cond=doswitchGuarded({! foundObstacle}) )
				}	 
				state("stepFail") { //this:State
					action { //it:State
						forward("resetTimer", "resetTimer(reset)" ,"timer" ) 
						forward("local_modelChanged", "modelChanged(robot,h)" ,"mindrobot" ) 
						println("Actor: OneStepForward; State:stepfail ")
						solve("wduration(TIME)","") //set resVar	
						forward("stepFail", "stepFail(obstacle,${getCurSol("TIME").toString()})" ,"controller" ) 
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("mustGoOn") { //this:State
					action { //it:State
					}
					 transition(edgeName="t08",targetState="endDoMoveForward",cond=whenEvent("tickTimer"))
					transition(edgeName="t09",targetState="handleSonarRobot",cond=whenEvent("sonarRobot"))
				}	 
			}
		}
}
