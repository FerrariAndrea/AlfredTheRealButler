System system2c
mqttBroker "192.168.43.61" : 1883

Event  envCond        : envCond( CONDTYPE )        //from the environment 
Event  sonarRobot     : sonar( DISTANCE )	     //from  sonar on robot 
Event  sonar          : sonar(SONAR, DISTANCE)	 //from sonar in the robot environment          
Event  polar          : p( Distance, Angle ) 

//my sonars (abilitati nel file kotlin "nanoSupport.kt riga 30")
Event  sonarLeft     : sonar( DISTANCE )
Event  sonarRigth     : sonar( DISTANCE )
Event  sonarBelancer    : sonar( DIFFERENCE )

Dispatch local_modelChanged   : modelChanged( TARGET, VALUE )
Dispatch robotCmd     : robotCmd( CMD )				  //sent by the mind to the basicrobot

Dispatch modelChange  : modelChange( TARGET, VALUE )  //force a resource-model change
Dispatch modelUpdate  : modelUpdate( TARGET, VALUE )  //sent by the mind


Context ctxRobot ip[host="localhost" port=8038] -mqtt
Context ctxDummy ip[host="dummyhost" port=9999] -mqtt //as ctdResourceModel and ctxMaitre

ExternalQActor resourcemodel context ctxDummy
ExternalQActor maitre context ctxDummy

QActor mindrobot context ctxRobot{
	["
	var obstacle = false
	val minDifferenceForBelance = 2
	"]
	
	State s0 initial {
		println("Start mindrobot")		
	}
	
	Goto waitCmd
	 
	State waitCmd {		} 
		
	Transition t0 whenEvent envCond      -> handleEnvCond
		          whenEvent sonarRobot   -> handleSonarRobot
		          whenEvent local_modelChanged -> handleModelChanged
	
	State handleEnvCond {
		printCurrentMessage
 		onMsg( envCond : envCond(CMD) ) {
 			forward basicrobot -m robotCmd : robotCmd( h )	//First do ...
 			forward resourcemodel -m modelUpdate : modelUpdate(robot,h) //... then update the model
		}
		
	}
	Goto requestBelancer
	
	State requestBelancer{
		run itunibo.robotRaspOnly.sonarBelancerOnlySupport.requestValue()
	}
	Transition t0 whenEvent sonarBelancer ->  riadrizza
	
	State riadrizza{
		["var again = false"]
		onMsg ( sonarBelancer : sonar( DIFFERENCE ) ){
			["
				var diff = Integer.parseInt( payloadArg(0) )								
			"]
			if "diff>2" {
				["again = true"]
				forward basicrobot -m robotCmd : robotCmd( a )			
				delay 50
				forward basicrobot -m robotCmd : robotCmd( h )
			}
			if "diff<-minDifferenceForBelance" {
				["again = true"]
				forward basicrobot -m robotCmd : robotCmd( d )	
				delay 50
				forward basicrobot -m robotCmd : robotCmd( h )
			}
 		}//onMsg
	}
	Goto waitCmd if "again==false" else requestBelancer
	
	State handleSonarRobot {
		printCurrentMessage
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){
			["obstacle = Integer.parseInt( payloadArg(0) ) < 10 "]
 		}//onMsg 	 
	}
	Goto waitCmd
	
	State handleModelChanged {
		["obstacle=false"]
		printCurrentMessage
		onMsg ( local_modelChanged : modelChanged(robot,CMD) ){ 
			forward basicrobot -m robotCmd : robotCmd( $payloadArg(1) )			
		}	
	}
	
	
	Goto handleObstacle if "obstacle" else waitCmd 
	
	State handleObstacle{		
		forward basicrobot -m robotCmd : robotCmd( h )	//First do ...
		forward resourcemodel -m modelUpdate : modelUpdate(robot,h) //... then update the model
		
	}
	Goto waitCmd
}

QActor basicrobot context ctxRobot{
	State s0 initial {
		println("Start basicrobot")
		solve( consult("basicRobotConfig.pl") )   
 		solve( robot(R, PORT) )  //R = virtual | realmbot | realnano
  		ifSolved {println( "USING ROBOT : ${getCurSol(\"R\")},  port= ${getCurSol(\"PORT\")} " )}
  		else {println("no robot")}
  		ifSolved {run itunibo.robot.robotSupport.create(myself, @R, @PORT )}
	}
	Goto waitCmd
	
	State waitCmd{  } //robotCmd comes from a console OUTSIDE this (sub)system
	Transition t0  whenMsg   robotCmd  -> handleRobotCmd
	
	State handleRobotCmd{ //does not handle alarms 
		//printCurrentMessage 
		onMsg( robotCmd : robotCmd( MOVE ) ) { 
			//MOVE = w | a | s | d | h
			run itunibo.robot.robotSupport.move( "msg(${payloadArg(0)})" ) 
			}			
		}
	Goto waitCmd 
}

QActor sonarhandler context ctxRobot {

	State s0 initial {
		println("Start Sonarhandler")		
	}
	Transition t0 whenEvent sonar      ->  handleSonar
   	              whenEvent sonarRobot ->  handleSonar
   	              whenEvent sonarLeft ->  handleSonar
   	              whenEvent sonarRigth ->  handleSonar
   				
   	/*
 * Event  sonarLeft     : sonar( DISTANCE )
	Event  sonarRigth     : sonar( DISTANCE )
Event  sonarBelancer    : sonar( DIFFERENCE )
* */

     
 	State handleSonar {                      
 	//	printCurrentMessage  
 	//---------------------------------------------------------------SONAR OGGETTI VIRTUALI                                      
 	//	onMsg ( sonar  : sonar( SONAR, DISTANCE ) ){    			
	//	[" val D = Integer.parseInt( payloadArg(1) ) * 5"] //AMPLIFY
	//		emit polar : p( $D, 90  )  
 	//	}
 	//---------------------------------------------------------------SONAR FRONTALE  
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){     
	//	[" val D = Integer.parseInt( payloadArg(0) ) * 5"] //AMPLIFY
	//		emit polar : p( $D, 180  ) 
			forward resourcemodel -m modelChange : modelChange(sonarRobot,$payloadArg(0))
 		}
 		//---------------------------------------------------------------SONAR Left
 		onMsg ( sonarLeft : sonar( DISTANCE ) ){     
	//	[" val D = Integer.parseInt( payloadArg(0) ) * 5"] //AMPLIFY
	//		emit polar : p( $D, 90  ) 
			forward resourcemodel -m modelChange : modelChange(sonarLeft,$payloadArg(0))
 		}
 		//---------------------------------------------------------------SONAR Rigth
 		onMsg ( sonarRigth : sonar( DISTANCE ) ){     
	//	[" val D = Integer.parseInt( payloadArg(0) ) * 5"] //AMPLIFY
	//		emit polar : p( $D, 270  ) 
			forward resourcemodel -m modelChange : modelChange(sonarRigth,$payloadArg(0))
 		}
 	} 
 	Transition t0 whenEvent sonar      ->  handleSonar
   	              whenEvent sonarRobot ->  handleSonar
   	              whenEvent sonarLeft ->  handleSonar
   	              whenEvent sonarRigth ->  handleSonar
}