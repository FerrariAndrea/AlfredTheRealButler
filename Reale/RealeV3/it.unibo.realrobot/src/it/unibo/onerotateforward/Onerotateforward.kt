/* Generated by AN DISI Unibo */ 
package it.unibo.onerotateforward

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Onerotateforward ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val RotateTime = 100L
				var RealMove = "a" 
				var ActualMove ="a"
				var Orientation =0L
				var OrientationZero =0L
				val ErroreConcesso = 5L
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Start onerotateforward")
						delay(500) 
						forward("compassReq", "compassReq(0)" ,"compass" ) 
					}
					 transition(edgeName="t09",targetState="setOrientationZero",cond=whenDispatch("compassRes"))
				}	 
				state("setOrientationZero") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("compassRes(ORIENTATION)"), Term.createTerm("compassRes(ORIENTATION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								OrientationZero = payloadArg(0).toLong()
						}
						println("OrientationZero set at --> $OrientationZero")
					}
					 transition( edgeName="goto",targetState="ready", cond=doswitch() )
				}	 
				state("ready") { //this:State
					action { //it:State
					}
					 transition(edgeName="t010",targetState="checkFirst",cond=whenDispatch("onerotationstep"))
				}	 
				state("checkFirst") { //this:State
					action { //it:State
						storeCurrentMessageForReply()
						if( checkMsgContent( Term.createTerm("onerotationstep(MOVE)"), Term.createTerm("onerotationstep(ORIENTATION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								RealMove = payloadArg(0)
						}
						forward("compassReq", "compassReq(0)" ,"compass" ) 
					}
					 transition(edgeName="t011",targetState="doRotationForward",cond=whenDispatch("compassRes"))
				}	 
				state("doRotationForward") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("compassRes(ORIENTATION)"), Term.createTerm("compassRes(ORIENTATION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								Orientation = payloadArg(0).toLong()
								if(RealMove=="a"){ OrientationZero=OrientationZero-90
								 }
								if(RealMove=="d"){ OrientationZero=OrientationZero+90
								 }
								if(OrientationZero<0){ OrientationZero=360-OrientationZero
								 }
								if(OrientationZero>360){ OrientationZero=OrientationZero-360
								 }
						}
						val abs = Math.abs(OrientationZero-Orientation)
					}
					 transition(edgeName="t012",targetState="endDoMoveForward",cond=whenEvent("tickTimer"))
					transition(edgeName="t013",targetState="handleSonarRobot",cond=whenEvent("sonarRobot"))
				}	 
				state("miniRotate") { //this:State
					action { //it:State
						val abs = Math.abs(OrientationZero-Orientation)
						if(>ErroreConcesso){  }
						forward("local_modelChanged", "modelChanged(robot,w)" ,"mindrobot" ) 
						forward("setTimer", "setTimer($StepTime)" ,"timer" ) 
						itunibo.planner.plannerUtil.startTimer(  )
					}
				}	 
				state("endDoMoveForward") { //this:State
					action { //it:State
						println("---------------------------OK----->endDoMoveForward")
						forward("local_modelChanged", "modelChanged(robot,h)" ,"mindrobot" ) 
						forward("modelUpdate", "modelUpdate(robot,w)" ,"kb" ) 
						replyToCaller("stepOk", "stepOk(ok)")
					}
					 transition( edgeName="goto",targetState="ready", cond=doswitch() )
				}	 
				state("handleSonarRobot") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("sonar(DISTANCE)"), Term.createTerm("sonar(DISTANCE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val distance = Integer.parseInt( payloadArg(0) ) 
								              FoundObstacle = (distance<DistanzaMinima) 
								if(FoundObstacle){ itunibo.planner.moveUtils.setDuration(myself)
								 }
								println("handleSonarRobot-ONESTEP--------------------------------------------->$distance")
						}
					}
					 transition( edgeName="goto",targetState="stepFail", cond=doswitchGuarded({FoundObstacle}) )
					transition( edgeName="goto",targetState="mustGoOn", cond=doswitchGuarded({! FoundObstacle}) )
				}	 
				state("stepFail") { //this:State
					action { //it:State
						forward("resetTimer", "resetTimer(reset)" ,"timer" ) 
						forward("local_modelChanged", "modelChanged(robot,h)" ,"mindrobot" ) 
						solve("wduration(TIME)","") //set resVar	
						Duration=getCurSol("TIME").toString().toLong()
					}
					 transition( edgeName="goto",targetState="goBackFromFail", cond=doswitch() )
				}	 
				state("goBackFromFail") { //this:State
					action { //it:State
						forward("modelChange", "modelChange(robot,s)" ,"resourcemodel" ) 
						delay(Duration)
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
						replyToCaller("stepFail", "stepFail(obstacle,$Duration) ")
					}
					 transition( edgeName="goto",targetState="ready", cond=doswitch() )
				}	 
				state("mustGoOn") { //this:State
					action { //it:State
						println("->mustGoOn")
					}
					 transition(edgeName="t014",targetState="endDoMoveForward",cond=whenEvent("tickTimer"))
					transition(edgeName="t015",targetState="handleSonarRobot",cond=whenEvent("sonarRobot"))
				}	 
			}
		}
}
