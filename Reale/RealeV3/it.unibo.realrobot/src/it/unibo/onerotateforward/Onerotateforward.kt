/* Generated by AN DISI Unibo */ 
package it.unibo.onerotateforward

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Onerotateforward ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val RotateTime = 50L
				val CompleteRotateTime = 500L
				val DelayForCompassReady=2L
				var RealMove = "a" 		
				//var ActualMove ="a"
				var Orientation =0L
				var OrientationZero =0L
				val ErroreConcesso = 5L
				var Abs =0L
				var NeedRotate =false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Start onerotateforward")
						delay(500) 
						forward("compassReq", "compassReq(0)" ,"compass" ) 
					}
					 transition(edgeName="t09",targetState="setOrientationZero",cond=whenDispatch("compassRes"))
				}	 
				state("setOrientationZero") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("compassRes(ORIENTATION)"), Term.createTerm("compassRes(ORIENTATION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								OrientationZero = payloadArg(0).toLong()
						}
						println("OrientationZero set at --> $OrientationZero")
					}
					 transition( edgeName="goto",targetState="ready", cond=doswitch() )
				}	 
				state("ready") { //this:State
					action { //it:State
					}
					 transition(edgeName="t010",targetState="checkFirst",cond=whenDispatch("onerotationstep"))
				}	 
				state("checkFirst") { //this:State
					action { //it:State
						storeCurrentMessageForReply()
						if( checkMsgContent( Term.createTerm("onerotationstep(MOVE)"), Term.createTerm("onerotationstep(ORIENTATION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								RealMove = payloadArg(0)
						}
						forward("compassReq", "compassReq(0)" ,"compass" ) 
					}
					 transition(edgeName="t011",targetState="doRotationForward",cond=whenDispatch("compassRes"))
				}	 
				state("doRotationForward") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("compassRes(ORIENTATION)"), Term.createTerm("compassRes(ORIENTATION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								Orientation = payloadArg(0).toLong()
								if(RealMove=="a"){ OrientationZero=OrientationZero-90
								 }
								if(RealMove=="d"){ OrientationZero=OrientationZero+90
								 }
								if(OrientationZero<0){ OrientationZero=360-OrientationZero
								 }
								if(OrientationZero>360){ OrientationZero=OrientationZero-360
								 }
						}
						
									 Abs = Math.abs(OrientationZero-Orientation)
									 NeedRotate = Abs>ErroreConcesso
					}
					 transition( edgeName="goto",targetState="miniRotate", cond=doswitchGuarded({NeedRotate}) )
					transition( edgeName="goto",targetState="endDoRotationForward", cond=doswitchGuarded({! NeedRotate}) )
				}	 
				state("bigRotation") { //this:State
					action { //it:State
						if(RealMove=="a"){ forward("local_modelChanged", "modelChanged(robot,a)" ,"mindrobot" ) 
						delay(CompleteRotateTime)
						forward("local_modelChanged", "modelChanged(robot,h)" ,"mindrobot" ) 
						 }
						if(RealMove=="d"){ forward("local_modelChanged", "modelChanged(robot,d)" ,"mindrobot" ) 
						delay(CompleteRotateTime)
						forward("local_modelChanged", "modelChanged(robot,h)" ,"mindrobot" ) 
						 }
						delay(DelayForCompassReady)
						forward("compassReq", "compassReq(0)" ,"compass" ) 
					}
					 transition(edgeName="t012",targetState="handleCompassRes",cond=whenDispatch("compassRes"))
				}	 
				state("handleCompassRes") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("compassRes(ORIENTATION)"), Term.createTerm("compassRes(ORIENTATION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								Orientation = payloadArg(0).toLong()
						}
						
									 Abs = Math.abs(OrientationZero-Orientation)
									 NeedRotate = Abs>ErroreConcesso
					}
					 transition( edgeName="goto",targetState="miniRotate", cond=doswitchGuarded({NeedRotate}) )
					transition( edgeName="goto",targetState="endDoRotationForward", cond=doswitchGuarded({! NeedRotate}) )
				}	 
				state("miniRotate") { //this:State
					action { //it:State
						
										val Inv = Math.abs(360-Abs)
										var Min = Abs
										if(Inv<Abs){Min=Inv}
										val Arotate = (Orientation+Min)==OrientationZero || (360-Orientation+Min)==OrientationZero
						if(Arotate){ forward("local_modelChanged", "modelChanged(robot,a)" ,"mindrobot" ) 
						 }
						else
						 { forward("local_modelChanged", "modelChanged(robot,d)" ,"mindrobot" ) 
						  }
						delay(RotateTime)
						forward("local_modelChanged", "modelChanged(robot,h)" ,"mindrobot" ) 
						delay(DelayForCompassReady)
						forward("compassReq", "compassReq(0)" ,"compass" ) 
					}
					 transition(edgeName="t013",targetState="handleCompassRes",cond=whenDispatch("compassRes"))
				}	 
				state("endDoRotationForward") { //this:State
					action { //it:State
						if(RealMove=="a"){ forward("modelUpdate", "modelUpdate(robot,a)" ,"kb" ) 
						 }
						if(RealMove=="d"){ forward("modelUpdate", "modelUpdate(robot,d)" ,"kb" ) 
						 }
						replyToCaller("rotationOk", "rotationOk(0)")
					}
					 transition( edgeName="goto",targetState="ready", cond=doswitch() )
				}	 
			}
		}
}
