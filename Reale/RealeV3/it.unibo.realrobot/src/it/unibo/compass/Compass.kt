/* Generated by AN DISI Unibo */ 
package it.unibo.compass

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Compass ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						surpluss.compassSupport.instance(  )
						println("Start compass")
						println("!!!!!!!! WARNING Compass waiting for calibration 2s !!!!!!!")
						delay(2000) 
						println("!!!!!!!!!!!!!!! WARNING COMPASS CALIBRATION !!!!!!!!!!!!!!!")
					}
					 transition( edgeName="goto",targetState="calibration", cond=doswitch() )
				}	 
				state("calibration") { //this:State
					action { //it:State
						forward("robotCmd", "robotCmd(sa)" ,"basicrobot" ) 
						delay(100) 
						val calibration_x_y =surpluss.compassSupport.calibrateCompass()
						forward("robotCmd", "robotCmd(h)" ,"basicrobot" ) 
						println("Compass calibration done: $calibration_x_y")
					}
					 transition(edgeName="t028",targetState="handleCompass",cond=whenEvent("compassReq"))
				}	 
				state("handleCompass") { //this:State
					action { //it:State
						storeCurrentMessageForReply()
						if( checkMsgContent( Term.createTerm("compassReq(V)"), Term.createTerm("compassReq(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val Orientation = surpluss.compassSupport.askToCompass().toLong()
								replyToCaller("compassRes", "compassRes($Orientation)")
						}
					}
					 transition(edgeName="t129",targetState="handleCompass",cond=whenEvent("compassReq"))
				}	 
			}
		}
}
