/* Generated by AN DISI Unibo */ 
package it.unibo.basicrobot

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Basicrobot ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Start basicrobot")
						solve("consult('basicRobotConfig.pl')","") //set resVar	
						solve("robot(R,PORT)","") //set resVar	
						surpluss.motorsSupport.create(myself ,"internalRobotRes" )
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t02",targetState="handleRobotCmd",cond=whenDispatch("robotCmd"))
					transition(edgeName="t03",targetState="handleRobotCmd",cond=whenDispatch("internalRobotReq"))
					transition(edgeName="t04",targetState="handleRobotCmd",cond=whenDispatch("internalRobotRes"))
				}	 
				state("handleRobotCmd") { //this:State
					action { //it:State
						storeCurrentMessageForReply()
						if( checkMsgContent( Term.createTerm("robotCmd(CMD)"), Term.createTerm("robotCmd(MOVE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val NonStep =-1
								surpluss.motorsSupport.askToMotors( "msg(${payloadArg(0)})", NonStep  )
						}
						if( checkMsgContent( Term.createTerm("internalRobotReq(CMD,STEPS)"), Term.createTerm("internalRobotReq(MOVE,STEP)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val Step= payloadArg(1).toInt()
								surpluss.motorsSupport.askToMotors( "msg(${payloadArg(0)})", Step  )
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
