System systemrobotreal
//mqttBroker "192.168.43.61" : 1883 //CELLULARE
mqttBroker "11.0.0.54" : 1883 //CASA

//----------------------------SONARS
Event  envCond        : envCond( CONDTYPE )        //from the environment 
Event  sonarRobot     : sonar( DISTANCE )	     //from  sonar on robot 
Event  sonar          : sonar(SONAR, DISTANCE)	 //from sonar in the robot environment          
Event  polar          : p( Distance, Angle ) 
Event  sonarLeft     : sonarLeft( DISTANCE )
Event  sonarRight     : sonarRight( DISTANCE )

Dispatch internalSonarReq   : internalSonarReq( V ) 
Dispatch internalSonarRes   : internalSonarRes( SonarW,SonarL,SonarR ) 

Event internalRobotRes     : internalRobotRes(V)

//----------------------------MONIVMENTI ALTO LIVELLO
Dispatch onestep       : onestep(DURATION)
Dispatch stepOk        : stepOk(V)		//TODO eliminate  V
Dispatch stepFail      : stepFail(R,T) //R=ok | obstacle, T = time

Dispatch onerotationstep   : onerotationstep(MOVE)
Dispatch rotationOk        : rotationOk(STALL)

//----------------------------PRINCIPALMENTE INTERNI
Dispatch setTimer        : setTimer(DURATION)		//TODO eliminate  V
Dispatch resetTimer      : resetTimer(V) //TODO eliminate  V
Dispatch tickTimer        : tickTimer(V) //TODO eliminate  V
Dispatch internalTickTimer   : internalTickTimer(V) //TODO eliminate  V


Dispatch local_modelChanged   : modelChanged( TARGET, VALUE )
Dispatch robotCmd     : robotCmd( CMD )				  //sent by the mind to the basicrobot
Dispatch internalRobotReq     : internalRobotReq( CMD, STEPS, WT,ST )
Event internalRobotRes     : internalRobotRes(V)

Dispatch modelChange  : modelChange( TARGET, VALUE )  //force a resource-model change
Dispatch modelUpdate  : modelUpdate( TARGET, VALUE )  //sent by the mind

Dispatch internalReq : internalReq( TARGET )
Dispatch lastSonarRobot : lastSonarRobot( DISATNCE )

//bussola (deprecato)
Dispatch compassReq : compassReq( V )//TODO eliminate  V
Dispatch compassRes : compassRes( ORIENTATION )

Dispatch setLed : setLed(BLINKN,BLINKDELAY )//BLINKDELAY=-1 ->ledOFF  //BLINKDELAY=0 -> ledOn //BLINKDELAY>0 --> blink for BLINKN time

Dispatch stop  : stop(V )  
Dispatch reactivate  : reactivate( V ) 

Context ctxRobot ip[host="localhost" port=8038] -mqtt
Context ctxDummy ip[host="dummyhost" port=9999] -mqtt //as ctdResourceModel and ctxMaitre

ExternalQActor kb context ctxDummy
ExternalQActor resourcemodel context ctxDummy

QActor mindrobot context ctxRobot{
	["var obstacle = false"]
	
	State s0 initial {
		println("Start mindrobot")		
	}
	
	Goto waitCmd
	 
	State waitCmd {		} 
	Transition t0 whenMsg envCond      -> handleEnvCond
		       //   whenEvent sonarRobot   -> handleSonarRobot
		          whenEvent local_modelChanged -> handleModelChanged
	
	State handleEnvCond {
		//printCurrentMessage
 		onMsg( envCond : envCond(CMD) ) {
 			forward basicrobot -m robotCmd : robotCmd( h )	//First do ...
 			forward resourcemodel -m modelUpdate : modelUpdate(robot,h) //... then update the model
		}
		
	}
	Goto waitCmd
		
	State handleModelChanged {
		//printCurrentMessage
		onMsg ( local_modelChanged : modelChanged(robot,CMD) ){ 		
			forward basicrobot -m robotCmd : robotCmd( $payloadArg(1) )	
			forward resourcemodel -m modelUpdate : modelUpdate(robot,$payloadArg(1)) //... then update the model
		}	
	}
	Goto waitCmd


}

QActor basicrobot context ctxRobot{
	["val MotorWorkTime :Int =20;val MotorSleepTime :Int =10;"]
	State s0 initial {
		println("Start basicrobot")
		solve( consult("basicRobotConfig.pl") )   
 		solve( robot(R, PORT) )  //R = virtual | realmbot | realnano
 		/*
  		ifSolved {println( "USING ROBOT : ${getCurSol(\"R\")},  port= ${getCurSol(\"PORT\")} " )}
  		else {println("no robot")}
  		ifSolved {run itunibo.robot.robotSupport.create(myself, @R, @PORT )}
  		
  		*/
  		run surpluss.motorsSupport.create(myself,"internalRobotRes")
	}
	Goto waitCmd
	
	State waitCmd{ 
	} //robotCmd comes from a console OUTSIDE this (sub)system
	Transition t0  whenMsg   robotCmd  -> handleRobotCmd
					whenMsg	 internalRobotReq  -> handleRobotCmd
					whenMsg	 internalRobotRes  -> handleRobotCmd
	
	State handleRobotCmd{ 
		delay 50 //fix missing 
		["storeCurrentMessageForReply()"]
		onMsg( robotCmd : robotCmd( MOVE ) ) { 
			//println("handleRobotCmd-->${payloadArg(0)}")	
			//MOVE = w | a | s | d | h
			//run itunibo.robot.robotSupport.move( "msg(${payloadArg(0)})" ) 
			["val NonStep =0"]
			run surpluss.motorsSupport.askToMotors("msg(${payloadArg(0)})")
		}
		onMsg( internalRobotReq : internalRobotReq( MOVE,STEP,WT,ST ) ) { 
			["val Step= payloadArg(1).toInt()"]
			["val WT= payloadArg(2).toInt()"]
			["val ST= payloadArg(3).toInt()"]
			if "WT<0 || ST <0"{
				run surpluss.motorsSupport.askToMotors("msg(${payloadArg(0)})",Step,MotorWorkTime,MotorSleepTime)
			}else{
				run surpluss.motorsSupport.askToMotors("msg(${payloadArg(0)})",Step,WT,ST)
			}
						
		}
	}
	Goto waitCmd 
}

QActor sonarcollector context ctxRobot{
	
	//Dispatch internalSonarReq   : internalSonarReq( V ) 
	//Dispatch internalSonarRes   : internalSonarRes( SonarW,SonarL,SonarR ) 
	["
		val minCount = 3
		var SonarW :IntArray= IntArray(3)
		var SonarL :IntArray= IntArray(3)
		var SonarR :IntArray= IntArray(3)
		var CountW :Int=0
		var CountL :Int=0
		var CountR :Int=0
	"]
	State s0 initial {
		println("Start sonarcollector")		
	}Transition t0 whenMsg internalSonarReq ->  handleReq
	
	State handleReq{
		["
			storeCurrentMessageForReply()
			 CountW =0
			 CountL =0
			 CountR =0
		"]	
	}Goto needCollect
	
	State collect{
		onMsg ( sonarRobot : sonar( DISTANCE ) ){ 
			if "CountW<minCount"{  
				["SonarW[CountW]=payloadArg(0).toInt();CountW++;"]
			}
 		}
 		onMsg ( sonarLeft : sonarLeft( DISTANCE ) ){ 
 			if "CountL<minCount"{
 				["SonarL[CountL]=payloadArg(0).toInt();CountL++;"]
 			}
 		
 		}
 		onMsg ( sonarRight : sonarRight( DISTANCE ) ){
 			if "CountR<minCount"{  
				["SonarR[CountR]=payloadArg(0).toInt();CountR++;"]				
			}
 		}
	}Goto response if "(CountW>=minCount && CountL>=minCount && CountR>=minCount)" else needCollect
	
	State needCollect{
		
	}Transition t0 whenEvent sonarRobot ->  collect
					 whenEvent sonarLeft ->  collect
					  whenEvent sonarRight ->  collect
					  
	State response{
		["		
 			SonarW.sort();SonarR.sort(); SonarL.sort()
			val medianaW = SonarW[minCount/3]
			val medianaR = SonarR[minCount/3]
			val medianaL = SonarL[minCount/3]
		"]
		delay 50 //for fix
		["	replyToCaller(\"internalSonarRes\", \"internalSonarRes($medianaW,$medianaR,$medianaL)\")"]
	}Transition t0 whenMsg internalSonarReq ->  handleReq

}

QActor sonarhandler context ctxRobot {


	["
		var LastSonarRobot : Int = 0
		var ForLedOldSonar : Int = 0
	"]
	State s0 initial {
		println("Start Sonarhandler")		
	}
	Transition t0 whenEvent sonarRobot ->  handleSonar
   			
 	State handleSonar {    
 		                  
 	//printCurrentMessage  
 	//---------------------------------------------------------------SONAR OGGETTI VIRTUALI                                      
 	//	onMsg ( sonar  : sonar( SONAR, DISTANCE ) ){    			
	//	[" val D = Integer.parseInt( payloadArg(1) ) * 5"] //AMPLIFY
	//		emit polar : p( $D, 90  )  
 	//	}
 	//---------------------------------------------------------------SONAR FRONTALE  
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){     
	//	[" val D = Integer.parseInt( payloadArg(0) ) * 5"] //AMPLIFY
	//		emit polar : p( $D, 180  ) 
			forward resourcemodel -m modelUpdate : modelUpdate(sonarRobot,$payloadArg(0))
 			["
				LastSonarRobot = Integer.parseInt( payloadArg(0) )
				val differenza = Math.abs(ForLedOldSonar-LastSonarRobot)
			"] 	
 			if "differenza>20"{ 				
 				["
					ForLedOldSonar=LastSonarRobot
				"]
 				forward leds -m setLed : setLed(1,80)  
 			}
 		}
 		//---------------------------------------------------------------SONAR Left
 		onMsg ( sonarLeft : sonarLeft( DISTANCE ) ){     
	//	[" val D = Integer.parseInt( payloadArg(0) ) * 5"] //AMPLIFY
	//		emit polar : p( $D, 90  ) 
			forward resourcemodel -m modelChange : modelChange(sonarLeft,$payloadArg(0))
 		}
 		//---------------------------------------------------------------SONAR Right
 		onMsg ( sonarRight : sonarRight( DISTANCE ) ){     
	//	[" val D = Integer.parseInt( payloadArg(0) ) * 5"] //AMPLIFY
	//		emit polar : p( $D, 270  ) 
			forward resourcemodel -m modelChange : modelChange(sonarRight,$payloadArg(0))
 		}
 		//per il dispatch interno dell'ultimo sonar
 		onMsg ( internalReq : internalReq( TARGET ) ){     
	//	[" val D = Integer.parseInt( payloadArg(0) ) * 5"] //AMPLIFY
	//		emit polar : p( $D, 270  ) 
			forward onecellforward -m lastSonarRobot : lastSonarRobot( $LastSonarRobot )
 		}
 	} 
 	Transition t0 whenEvent sonar      ->  handleSonar
   	              whenEvent sonarRobot ->  handleSonar
   	              whenEvent sonarLeft ->  handleSonar
   	              whenEvent sonarRight ->  handleSonar
   	              whenMsg internalReq ->  handleSonar
}

QActor onerotateforward context ctxRobot {
	["
		val RotateTime = 1L
		val CompleteRotateTimeA = 400L
		val CompleteRotateTimeD = 450L
		val ErroreConcesso : Int = 2
		val SogliaDiScarto : Int = 20 //per evitare errori dovuti ad esempio al tavolo in mezzo alla stanza
		val WaitingTimg : Long = 5000
		//------------------------
		var RealMove = \"a\" 
		//for calibration:
		var SonarD :Int =-1
		var SonarA :Int =-1
		var SonarW :Int =-1
		var SonarDAfter :Int =-1
		var SonarAAfter :Int =-1
		var SonarWAfter :Int =-1
		var Arotate = false
		var NeedCalibration = true
		var NeedCorrezione =false
		//-----------FIX rotation
		val FixEnable = false
	"]  
	State s0 initial {	   		
		println("Start onerotateforward")		
	}Goto ready
	
	State ready{
		println("onerotateforward is READY")
	}Transition t0 whenMsg onerotationstep -> checkFirst
					whenMsg stop -> paused
			
			
	State paused{
		println("onerotateforward is PAUSED")
	}Transition t0 whenMsg reactivate -> ready
		
	
	State checkFirst{
		//qui in futuro si possono controllare i vari sensori e dedurre uno stallo
		["storeCurrentMessageForReply()"]		
		onMsg( onerotationstep : onerotationstep(ORIENTATION) ) {
			["RealMove = payloadArg(0)"]
			if "RealMove==\"a\" ||  RealMove==\"d\""{
				 ["SonarD=-1;SonarA=-1;SonarW=-1;"]				
			}
		}		
	}Transition t1 whenEvent sonarRobot ->  calibration
					 whenEvent sonarLeft ->  calibration
					 whenEvent sonarRight ->  calibration
 	
	State calibration{
		onMsg ( sonarRobot : sonar( DISTANCE ) ){  
			["SonarW=Integer.parseInt( payloadArg(0) )"]	
		}
		onMsg ( sonarRobot : sonar( DISTANCE ) ){  
			["SonarA=Integer.parseInt( payloadArg(0) )"]
		}
		onMsg ( sonarRight : sonarRight( DISTANCE ) ){  
			["SonarD=Integer.parseInt( payloadArg(0) )"]
		}		
		["NeedCalibration=(SonarD<0 || SonarA<0 || SonarW<0)"]		
	}Goto calibrationAgaint if "NeedCalibration" else doRotationForward
	
	State calibrationAgaint{		
	}Transition t1 whenEvent sonarRobot ->  calibration
					 whenEvent sonarLeft ->  calibration
					 whenEvent sonarRight ->  calibration
	
	State doRotationForward{
		delay 80 //fix missing 
		if "RealMove==\"a\""{ 			
	  		forward basicrobot -m internalRobotReq :  internalRobotReq( as,1, $CompleteRotateTimeA ,0)
			forward resourcemodel -m modelUpdate : modelUpdate(robot,a)	
	  	}
		if "RealMove==\"d\""{
			forward basicrobot -m internalRobotReq :  internalRobotReq( ds,1, $CompleteRotateTimeD,0 )
			forward resourcemodel -m modelUpdate : modelUpdate(robot,d)	
		}
		
	}Transition t1 whenEvent internalRobotRes ->  endRotate
	
	State endRotate{
		forward resourcemodel -m modelUpdate : modelUpdate(robot,h)
		if "!FixEnable"{
			if "RealMove==\"a\""{
		  		forward kb -m modelUpdate : modelUpdate(  robot,  a)
		  	}
			if "RealMove==\"d\""{
				forward kb -m modelUpdate : modelUpdate(  robot, d)
			}  	
			["replyToCaller(\"rotationOk\", \"rotationOk(0)\")"]
		}		
	}Goto startFix if "FixEnable" else ready  
		
	State startFix{
			delayVar WaitingTimg	
		["SonarDAfter=-1;SonarAAfter=-1;SonarWAfter-1;"]
	}Transition t1 whenEvent sonarRobot ->  calibrationAfter
					 whenEvent sonarLeft ->  calibrationAfter
					 whenEvent sonarRight ->  calibrationAfter			 
	State calibrationAfter{
		onMsg ( sonarRobot : sonar( DISTANCE ) ){  
			["SonarWAfter=Integer.parseInt( payloadArg(0) )"]	
		}
		onMsg ( sonarRobot : sonar( DISTANCE ) ){  
			["SonarAAfter=Integer.parseInt( payloadArg(0) )"]
		}
		onMsg ( sonarRight : sonarRight( DISTANCE ) ){  
			["SonarDAfter=Integer.parseInt( payloadArg(0) )"]
		}		
		["NeedCalibration=(SonarDAfter<0 || SonarAAfter<0 || SonarWAfter<0)"]
	}Goto calibrationAfterAgaint if "NeedCalibration" else correggi
	
	State calibrationAfterAgaint{		
	}Transition t1 whenEvent sonarRobot ->  calibrationAfter
					 whenEvent sonarLeft ->  calibrationAfter
					 whenEvent sonarRight ->  calibrationAfter
	
	State correggi{
		["NeedCorrezione =false"]
		if "RealMove==\"d\""{
			["Arotate=false;NeedCorrezione=(Math.abs(SonarD-SonarWAfter)>ErroreConcesso ||  Math.abs(SonarW-SonarAAfter)>ErroreConcesso )"]
		}else{
			if "RealMove==\"a\""{
				["Arotate=true;NeedCorrezione=(Math.abs(SonarA-SonarWAfter)>ErroreConcesso ||  Math.abs(SonarW-SonarDAfter)>ErroreConcesso )"]
			}else{//no rotation 
				["
					var differenceA =SonarAAfter-SonarA
					var differenceD =SonarDAfter-SonarD
				"]
				if "(Math.abs(differenceA)>ErroreConcesso*2 && Math.abs(differenceA)<SogliaDiScarto)"{
					["NeedCorrezione=true"]
					["Arotate=differenceA>0"]
				}
				if "(Math.abs(differenceD)>ErroreConcesso*2 && Math.abs(differenceD)<SogliaDiScarto)"{
					["NeedCorrezione=true"]
					["Arotate=differenceD<0"]
				}
				
			}
		}
		
	}Goto miniRotate if "NeedCorrezione" else endDoRotationForward
	
	  State miniRotate{
	  		delay 50 //fix missing 
			if"Arotate"{
				forward basicrobot -m internalRobotReq :  internalRobotReq( am,1, 2,0)
				//forward resourcemodel -m modelUpdate : modelUpdate(robot,a)	
			}else{
				forward basicrobot -m internalRobotReq :  internalRobotReq( dm,1, 2,0 )
				//forward resourcemodel -m modelUpdate : modelUpdate(robot,d)		  			  		
			}			
	  }Transition t1 whenEvent internalRobotRes ->  endMiniRotate
	  
	State endMiniRotate{
		forward resourcemodel -m modelUpdate : modelUpdate(robot,h)		
		delayVar WaitingTimg	
		["SonarDAfter=-1;SonarAAfter=-1;SonarWAfter-1;"]
	}Transition t1 whenEvent sonarRobot ->  calibrationAfter
					 whenEvent sonarLeft ->  calibrationAfter
					 whenEvent sonarRight ->  calibrationAfter
	  
	State endDoRotationForward{
		//Rotation ok quindi salvo sulla kb
		if "RealMove==\"a\""{
	  		forward kb -m modelUpdate : modelUpdate(  robot,  a)
	  	}
		if "RealMove==\"d\""{
			forward kb -m modelUpdate : modelUpdate(  robot, d)
		}  		
		delay 50 //fix
		["replyToCaller(\"rotationOk\", \"rotationOk(0)\")"]
	}Goto ready
	
	
}

QActor onecellforward context ctxRobot {
	["
		val WorkTime : Long =40 //ms
		val SleepTime : Long =10 //ms
		val DistanzaCella : Long =25 //cm

		var FoundObstacle = false
		var StepTime = 0L
		var Duration : Long =0
		var DistanzaMinima :Long =15
		
		var ActualStep : Int =0
		var ActualL : Int =0
		var ActualR : Int =0
		var L : Int =-1
		var R : Int =-1
		var DeviazioneL: Int=0
		var DeviazioneR: Int=0
	"]  
	State s0 initial {	   		
		println("Start onecellforward")
	}Goto ready
	
	State ready{
			println("onecellforward is READY")
	}Transition t0 whenMsg onestep -> checkFirst
					whenMsg stop -> paused
						
	State paused{
		println("onecellforward is PAUSED")
	}Transition t0 whenMsg reactivate -> ready
	
	State checkFirst{
		["
			storeCurrentMessageForReply()
			FoundObstacle = false 
		"]		
		onMsg( onestep : onestep( TIME ) ) {
			["StepTime = payloadArg(0).toLong()"]
		}
		forward sonarcollector -m internalSonarReq : internalSonarReq(V)
	}Transition t0 whenMsg internalSonarRes  -> waitingForcheckFirstSonar
	
	State waitingForcheckFirstSonar{
		onMsg ( internalSonarRes : internalSonarRes( W,L,R ) ){     
			["
				val W = Integer.parseInt( payloadArg(0) ) 
				ActualL = Integer.parseInt( payloadArg(1) ) 
				ActualR = Integer.parseInt( payloadArg(2) ) 
				FoundObstacle=W<DistanzaMinima
				DeviazioneL=0
				DeviazioneR=0
            "]  
             if"FoundObstacle"{
             		["replyToCaller(\"collision\", \" collision(RealWall) \")"]	//per l'explorer	
					["replyToCaller(\"stepFail\", \"stepFail(obstacle,$W) \")"]
				println("Actor: OneStepForward; State:cantDoOneStep")	
              }else{              	
              	println("Actor: OneStepForward; State: OK-> $W")	
              }
            }
   		["ActualStep=0"]
	}Goto ready if "FoundObstacle" else doMoveForward

	State doMoveForward{
			println("doMoveForward")
			delay 50 //fix missing 
			["ActualStep=ActualStep+1"]	
			forward basicrobot -m internalRobotReq :  internalRobotReq( ws, 2,$WorkTime,$SleepTime )
	}Transition t0 whenEvent internalRobotRes  -> checkFinish
	
	State checkFinish{
		println("checkFinish")
		forward resourcemodel -m modelUpdate : modelUpdate(robot,w)
	}Goto mustGoOn if "(ActualStep<StepTime)" else endDoMoveForward
	
	  State mustGoOn{
	  	println("mustGoOn")
	  	forward sonarcollector -m internalSonarReq : internalSonarReq(V)
	  }Transition t0 whenEvent internalSonarRes  -> checkMove	
		
	State checkMove{
			println("checkMove")
		onMsg ( internalSonarRes : internalSonarRes( W,L,R ) ){     
			["
				val W = Integer.parseInt( payloadArg(0) ) 
				ActualL = Integer.parseInt( payloadArg(1) ) 
				ActualR = Integer.parseInt( payloadArg(2) ) 
				FoundObstacle=W<DistanzaMinima
				DeviazioneL=0
				DeviazioneR=0
            "]  
            println("checkMove $W $ActualR $ActualL")
            if"ActualL<ActualR"{
            	if "L<0" {
            		["L=ActualL"]
	            }else{
	            	["DeviazioneL=L-ActualL"]
	            }
            }else{
            	 if "R<0" {
            		["R=ActualR"]
	            }else{
	            	["DeviazioneR=R-ActualR"]
	            }
            }
            
            
  		}
	}Goto fixMove if "(DeviazioneL!=0 || DeviazioneR!=0)" else checkFail
	
	State fixMove{
		println("fixMove")		
		if "DeviazioneL>0 || DeviazioneR<0"  {
			//a
			["ActualStep=ActualStep+1"]	
			forward basicrobot -m internalRobotReq :  internalRobotReq( am,2,$WorkTime,$SleepTime )			
		}else{
			//d	
			["ActualStep=ActualStep+1"]	
			forward basicrobot -m internalRobotReq :  internalRobotReq( dm, 2,$WorkTime,$SleepTime )			
		}
	}Goto checkFail
	
	State checkFail{
		println("checkFail")		
	}Goto stepFail if "FoundObstacle" else doMoveForward
	
	State endDoMoveForward{
		println("endDoMoveForward")
		//setp in avanti ok quindi salvo sulla kb
		forward kb -m modelUpdate : modelUpdate(  robot,  w)  
		["replyToCaller(\"stepOk\", \"stepOk(ok)\")"]	
	}//Transition t0 whenEvent rotationOk  -> endCorrezioneRotta	
	Goto ready
		
	State stepFail{	
		forward resourcemodel -m modelChange : modelChange(robot,h)
	}Goto goBackFromFail
	
	State goBackFromFail{
		println("goBackFromFail")
		delay 50 //fix missing 
		if "ActualStep>0" {
			forward basicrobot -m internalRobotReq :  internalRobotReq( ss, $ActualStep,$WorkTime,$SleepTime )
		}else{
			forward basicrobot -m internalRobotReq :  internalRobotReq(ss,1,10,100)		
		}		
	}Transition t0 whenEvent internalRobotRes  -> endGoBackFormFail	
	
	State endGoBackFormFail{		
		println("endGoBackFormFail")
		forward resourcemodel -m modelUpdate : modelUpdate(robot,s)
		delay 50 //fix
		forward resourcemodel -m modelChange : modelChange(robot,h)
		["replyToCaller(\"collision\", \" collision(RealWall) \")"]	//per l'explorer	
		["replyToCaller(\"stepFail\", \"stepFail(obstacle,$Duration) \")"]		
	}Goto ready
	
	
}

QActor timer context ctxRobot {
	["var ActualTimer = 0L "]
	State s0 initial {	   
		println("Start timer") 
		run surpluss.timerSupport.create(myself)
	}Goto ready
	
	State ready{
		  
		["ActualTimer = 0L "]
		}Transition t0 whenMsg setTimer -> start
	
	State start{
		onMsg( setTimer : setTimer( DURATION ) ) {
			["ActualTimer = payloadArg(0).toLong()"]  //esempio-->650
		}
		run surpluss.timerSupport.startTimer(ActualTimer)
		//println("${System.currentTimeMillis()}")//esempio-->1564732238868		
	}Transition t0 // whenTimeVar  ActualTimer -> drinnn	
					whenMsg resetTimer  -> reset
					whenMsg internalTickTimer  -> drinnn
					
	State reset{
		run surpluss.timerSupport.resetTimer()		
	}Goto ready
	
	State drinnn{
		//println("${System.currentTimeMillis()}")//esempio-->1564732239862
		//1564732239862-1564732238868 = 994 != 650
		forward onecellforward -m tickTimer : tickTimer(ok) 
	}
	Goto ready
	
}

QActor leds context ctxRobot {
	["
		var ActualCont : Long =0
		var BlinkDelay : Long = 0
		var BlinkNumber : Long = 0
		val MinBlinkingDelay : Long = 50
		var NeedBlink =false
		val OnTiming :Long = 50 
	"]
	State s0 initial {	
		println("Start leds")   
		run surpluss.ledManagerSupport.instance()
		delay 10
		run surpluss.ledManagerSupport.frontLedOn()
		delay 1000
		run surpluss.ledManagerSupport.frontLedOff()
		//in futuro qui in attesa del messaggio di start
	}Goto waitingForCMD
	
	State waitingForCMD{
		
	}Transition t0 whenMsg  setLed -> handleSetLed
					
	State handleSetLed{
		["NeedBlink = true"]
		onMsg( setLed : setLed(BLINKN,BLINKDELAY ) ) {
			["
				ActualCont=0
				BlinkNumber = payloadArg(0).toLong()
				BlinkDelay  = payloadArg(1).toLong()
			"]
			if "BlinkDelay<0 || BlinkNumber<0"{
				run surpluss.ledManagerSupport.frontLedOff()
				["NeedBlink = false"]
			}
			if "BlinkDelay>=0 && BlinkDelay<MinBlinkingDelay"{
				run surpluss.ledManagerSupport.frontLedOn()	
				["NeedBlink = false"]		
			}
		}
	}Goto blinkOn if "NeedBlink" else waitingForCMD
	
	State blinkOn{
		run surpluss.ledManagerSupport.frontLedOn()
		["ActualCont=ActualCont+1"]	
		
	}Transition t0 whenTimeVar OnTiming -> blinkOff
	
	State blinkOff{
		run surpluss.ledManagerSupport.frontLedOff()
		["NeedBlink = (ActualCont<BlinkNumber)"]
	}	
	Goto needBlinkAgain if "NeedBlink" else waitingForCMD
			
	State needBlinkAgain{
		
	}Transition t0 whenTimeVar BlinkDelay -> blinkOn
					//whenEvent  setLed -> handleSetLed
	
}

QActor realforntsonar context ctxRobot{
	["	
		var ActualTimer : Long = 80
		//var PollingModeOn =true
		//var NeedAck =true
	"]
	State s0 initial {	
		run surpluss.pollingSonar.instance()
		println("Start realSonar") 
	}Transition t0  whenTimeVar  ActualTimer -> doNotifyAll
	//Goto pollingMode if "PollingModeOn" else reqResMode
	
	/*
	State pollingMode{	
	}Transition t0  whenTimeVar  ActualTimer -> doNotifyAll
					whenMsg internalSonarChangeMode -> changeMode
	
	State changeMode{
		["storeCurrentMessageForReply()"]	
		onMsg ( internalSonarChangeMode : internalSonarChangeMode( MODE ) ){     
			["val MODE: Int = Integer.parseInt( payloadArg(0) ) "]
              if "MODE==0"{
	 			["PollingModeOn=true;NeedAck=true;"]	 			
              }else{
              	["PollingModeOn=false"]
              }
  		}
	}Goto pollingMode if "PollingModeOn" else reqResMode
	 */
	State doNotifyAll{
		["val Distance = surpluss.pollingSonar.askToSonar().toInt()"]
		if"Distance>0"{			
			emit sonarRobot : sonar($Distance)
		}		
	}Transition t0  whenTimeVar  ActualTimer -> doNotifyAll
	//Goto pollingMode if "PollingModeOn" else reqResMode
	
	/*
	State reqResMode{
		if "NeedAck"{
				["replyToCaller(\"internalSonarChangeMode\", \"internalSonarChangeMode(2)\")"]
		}	
	}Transition t0  whenMsg internalSonarChangeMode -> changeMode
					whenMsg internalSonarReq -> doNotifyAll
	*/
}

QActor reallateralsonar context ctxRobot{
	["	
		var ActualTimer : Long = 80
	"]
	State s0 initial {	
		run surpluss.pollingSonar.instance()
		println("Start realSonar") 
	}
	Transition t0  whenTimeVar  ActualTimer -> doNotifyAll
	
	State doNotifyAll{
		["val Distance_L = surpluss.pollingSonar.askToSonarLaterali(1).toInt()"]
		if"Distance_L>0"{			
			emit sonarLeft : sonarLeft($Distance_L)
		}
		["val Distance_R = surpluss.pollingSonar.askToSonarLaterali(0).toInt()"]
		if"Distance_R>0"{			
			emit sonarRight : sonarRight($Distance_R)
		}
	}
	Transition t1  whenTimeVar  ActualTimer -> doNotifyAll	
	
}

QActor compass context ctxRobot{

	State s0 initial {	
		run surpluss.compassSupport.instance()
		println("Start compass") 
		/*
				println("!!!!!!!! WARNING Compass waiting for calibration 2s !!!!!!!")
				delay 2000 
				println("!!!!!!!!!!!!!!! WARNING COMPASS CALIBRATION !!!!!!!!!!!!!!!") 	
		*/	
	}
	Goto calibration
		
	State calibration{
		/*
					forward basicrobot -m robotCmd : robotCmd(c)	
					delay 100
					 ["val calibration_x_y =surpluss.compassSupport.calibrateCompass()"]
					 forward basicrobot -m robotCmd : robotCmd( h )	
					// 	forward resourcemodel -m modelChange : modelChange(robot,h) 
					 println("Compass calibration done: $calibration_x_y") 
		 */
	}Transition t0  whenMsg compassReq  -> handleCompass
	
	State handleCompass{
		["storeCurrentMessageForReply()"]			
		onMsg ( compassReq : compassReq( V ) ){  
			if "payloadArg(0)==\"fix\""{
					["val Ris = surpluss.compassSupport.fixCompass()"]
      				["replyToCaller(\"compassRes\", \"compassRes($Ris)\")"]
			} else{
					["val Orientation = surpluss.compassSupport.askToCompass().toLong()"]
      				["replyToCaller(\"compassRes\", \"compassRes($Orientation)\")"]
			}
			
       }
	}
	Transition t1  whenMsg  compassReq -> handleCompass	
	
}
