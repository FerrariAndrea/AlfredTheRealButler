System systemrobotreal
//mqttBroker "192.168.43.61" : 1883 //CELLULARE
mqttBroker "11.0.0.54" : 1883 //CASA

//----------------------------SONARS
Event  envCond        : envCond( CONDTYPE )        //from the environment 
Event  sonarRobot     : sonar( DISTANCE )	     //from  sonar on robot 
Event  sonar          : sonar(SONAR, DISTANCE)	 //from sonar in the robot environment          
Event  polar          : p( Distance, Angle ) 
Event  sonarLeft     : sonarLeft( DISTANCE )
Event  sonarRigth     : sonarRigth( DISTANCE )
//----------------------------MONIVMENTI ALTO LIVELLO
Dispatch onestep       : onestep(DURATION)
Dispatch stepOk        : stepOk(V)		//TODO eliminate  V
Dispatch stepFail      : stepFail(R,T) //R=ok | obstacle, T = time

Dispatch onerotationstep   : onerotationstep(MOVE)
Dispatch rotationOk        : rotationOk(STALL)

//----------------------------PRINCIPALMENTE INTERNI
Dispatch setTimer        : setTimer(DURATION)		//TODO eliminate  V
Dispatch resetTimer      : resetTimer(V) //TODO eliminate  V
Dispatch tickTimer        : tickTimer(V) //TODO eliminate  V

Dispatch local_modelChanged   : modelChanged( TARGET, VALUE )
Dispatch robotCmd     : robotCmd( CMD )				  //sent by the mind to the basicrobot

Dispatch modelChange  : modelChange( TARGET, VALUE )  //force a resource-model change
Dispatch modelUpdate  : modelUpdate( TARGET, VALUE )  //sent by the mind

Dispatch internalReq : internalReq( TARGET )
Dispatch lastSonarRobot : lastSonarRobot( DISATNCE )

Dispatch compassReq : compassReq( V )//TODO eliminate  V
Dispatch compassRes : compassRes( ORIENTATION )

Dispatch setLed : setLed(BLINKN,BLINKDELAY )//BLINKDELAY=-1 ->ledOFF  //BLINKDELAY=0 -> ledOn //BLINKDELAY>0 --> blink for BLINKN time

Dispatch claibrationMsg : claibrationMsg( arg ) //TODO eliminate  V


Context ctxRobot ip[host="localhost" port=8038] -mqtt
Context ctxDummy ip[host="dummyhost" port=9999] -mqtt //as ctdResourceModel and ctxMaitre

ExternalQActor kb context ctxDummy
ExternalQActor resourcemodel context ctxDummy

QActor mindrobot context ctxRobot{
	["var obstacle = false"]
	
	State s0 initial {
		println("Start mindrobot")		
	}
	
	Goto waitCmd
	 
	State waitCmd {		} 
	Transition t0 whenEvent envCond      -> handleEnvCond
		       //   whenEvent sonarRobot   -> handleSonarRobot
		          whenEvent local_modelChanged -> handleModelChanged
	
	State handleEnvCond {
		//printCurrentMessage
 		onMsg( envCond : envCond(CMD) ) {
 			forward basicrobot -m robotCmd : robotCmd( h )	//First do ...
 			forward resourcemodel -m modelUpdate : modelUpdate(robot,h) //... then update the model
		}
		
	}
	Goto waitCmd
		
	State handleModelChanged {
		//printCurrentMessage
		onMsg ( local_modelChanged : modelChanged(robot,CMD) ){ 
			//println("handleModelChanged-->${payloadArg(1)}")			
			forward basicrobot -m robotCmd : robotCmd( $payloadArg(1) )	
			forward resourcemodel -m modelUpdate : modelUpdate(robot,$payloadArg(1)) //... then update the model
		}	
	}
	Goto waitCmd


}

QActor basicrobot context ctxRobot{
	State s0 initial {
		println("Start basicrobot")
		solve( consult("basicRobotConfig.pl") )   
 		solve( robot(R, PORT) )  //R = virtual | realmbot | realnano
  		ifSolved {println( "USING ROBOT : ${getCurSol(\"R\")},  port= ${getCurSol(\"PORT\")} " )}
  		else {println("no robot")}
  		ifSolved {run itunibo.robot.robotSupport.create(myself, @R, @PORT )}
	}
	Goto waitCmd
	
	State waitCmd{ 
	} //robotCmd comes from a console OUTSIDE this (sub)system
	Transition t0  whenMsg   robotCmd  -> handleRobotCmd
	
	State handleRobotCmd{ //does not handle alarms 
		//printCurrentMessage 
		onMsg( robotCmd : robotCmd( MOVE ) ) { 
			//println("handleRobotCmd-->${payloadArg(0)}")	
			//MOVE = w | a | s | d | h
			run itunibo.robot.robotSupport.move( "msg(${payloadArg(0)})" ) 
			}			
		}
	Goto waitCmd 
}

QActor sonarhandler context ctxRobot {


	["
		var LastSonarRobot : Int = 0
		var ForLedOldSonar : Int = 0
	"]
	State s0 initial {
		println("Start Sonarhandler")		
	}
	Transition t0 whenEvent sonarRobot ->  handleSonar
   				


     
 	State handleSonar {    
 		                  
 	//printCurrentMessage  
 	//---------------------------------------------------------------SONAR OGGETTI VIRTUALI                                      
 	//	onMsg ( sonar  : sonar( SONAR, DISTANCE ) ){    			
	//	[" val D = Integer.parseInt( payloadArg(1) ) * 5"] //AMPLIFY
	//		emit polar : p( $D, 90  )  
 	//	}
 	//---------------------------------------------------------------SONAR FRONTALE  
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){     
	//	[" val D = Integer.parseInt( payloadArg(0) ) * 5"] //AMPLIFY
	//		emit polar : p( $D, 180  ) 
			forward resourcemodel -m modelUpdate : modelUpdate(sonarRobot,$payloadArg(0))
 			["
				
				LastSonarRobot = Integer.parseInt( payloadArg(0) )
				val differenza = Math.abs(ForLedOldSonar-LastSonarRobot)
			"] 	
 			//	println("lastsonarrobot--> $LastSonarRobot")
 			
 			
 			if "differenza>20"{ 				
 				["
					ForLedOldSonar=LastSonarRobot
				"]
 				forward leds -m setLed : setLed(1,80)  
 			}
 	
 			
 		}
 		//---------------------------------------------------------------SONAR Left
 		onMsg ( sonarLeft : sonarLeft( DISTANCE ) ){     
	//	[" val D = Integer.parseInt( payloadArg(0) ) * 5"] //AMPLIFY
	//		emit polar : p( $D, 90  ) 
			forward resourcemodel -m modelChange : modelChange(sonarLeft,$payloadArg(0))
 		}
 		//---------------------------------------------------------------SONAR Rigth
 		onMsg ( sonarRigth : sonarRigth( DISTANCE ) ){     
	//	[" val D = Integer.parseInt( payloadArg(0) ) * 5"] //AMPLIFY
	//		emit polar : p( $D, 270  ) 
			forward resourcemodel -m modelChange : modelChange(sonarRigth,$payloadArg(0))
 		}
 		//per il dispatch interno dell'ultimo sonar
 		onMsg ( internalReq : internalReq( TARGET ) ){     
	//	[" val D = Integer.parseInt( payloadArg(0) ) * 5"] //AMPLIFY
	//		emit polar : p( $D, 270  ) 
			forward onecellforward -m lastSonarRobot : lastSonarRobot( $LastSonarRobot )
 		}
 	} 
 	Transition t0 whenEvent sonar      ->  handleSonar
   	              whenEvent sonarRobot ->  handleSonar
   	              whenEvent sonarLeft ->  handleSonar
   	              whenEvent sonarRigth ->  handleSonar
   	               whenEvent internalReq ->  handleSonar
}



QActor onerotateforward context ctxRobot {
	["
		val RotateTime = 50L
		val CompleteRotateTime = 300L
		val DelayForCompassReady=50L
		val ErroreConcesso = 2L
		//------------------------
		var RealMove = \"a\" 		
		var Orientation =0L
		var OrientationZero =0L	
		var Abs =0L
		var NeedRotate =false
	"]  
	State s0 initial {	   		
		println("Start onerotateforward")
	}Transition t0 whenMsg claibrationMsg -> calibrateOrientation
	
	State calibrateOrientation{		
		println("Onerotateforward CalibrateOrientation start.")
		forward compass -m compassReq : compassReq(0)	
	}Transition t0 whenMsg compassRes -> setOrientationZero
		
	State setOrientationZero{
		onMsg( compassRes : compassRes(ORIENTATION) ) {
				["OrientationZero = payloadArg(0).toLong()"]
		}
		println("OrientationZero set at --> $OrientationZero")
	}Goto ready

	State ready{
	}Transition t0 whenMsg onerotationstep -> checkFirst
	
	State checkFirst{
		//qui in futuro si possono controllare i vari sensori e dedurre uno stallo
		["storeCurrentMessageForReply()"]		
		onMsg( onerotationstep : onerotationstep(ORIENTATION) ) {
			["RealMove = payloadArg(0)"]
		}
		forward compass -m compassReq : compassReq(0)			
		// compassReq : compassReq( V )//TODO eliminate  V
		//compassRes : compassRes( ORIENTATION )
	}Transition t0 whenMsg compassRes -> doRotationForward
 
	State doRotationForward{		  

		onMsg( compassRes : compassRes(ORIENTATION) ) {
			["Orientation = payloadArg(0).toLong()"]
			if "RealMove==\"a\""{
				["OrientationZero=OrientationZero-90"]
				
			}
			if "RealMove==\"d\""{
					["OrientationZero=OrientationZero+90"]
			}
			//se no mi referisco all prima orientazione in assoluto (OrientationZero)
			
			if"OrientationZero<0"{
				["OrientationZero=360+OrientationZero"]
			}
			if"OrientationZero>360"{
				["OrientationZero=OrientationZero-360"]
			}
				
			
		}
		["
			 Abs = Math.abs(OrientationZero-Orientation)
			 NeedRotate = Abs>ErroreConcesso
		"]
		
	
	}Goto bigRotation if "NeedRotate" else correggi
	
	State bigRotation{
		
		if "RealMove==\"a\""{
	  			//forward mindrobot -m local_modelChanged : modelChanged(robot, a)	  			
				forward resourcemodel -m modelChange : modelChange(robot,a)
	  			delayVar CompleteRotateTime
	  			//forward mindrobot -m local_modelChanged : modelChanged(robot, h)
	  			forward resourcemodel -m modelChange : modelChange(robot,h)	  			
	  			println("bigRotation-->a finish")
	  	}
		if "RealMove==\"d\""{
			//forward mindrobot -m local_modelChanged : modelChanged(robot, d)
			forward resourcemodel -m modelChange : modelChange(robot,d)	  			
			delayVar CompleteRotateTime
	 		//forward mindrobot -m local_modelChanged : modelChanged(robot, h)
	 		forward resourcemodel -m modelChange : modelChange(robot,h)	  			
	 		println("bigRotation-->d finish")
		}
	}Goto correggi
	
	State correggi{
		delayVar DelayForCompassReady	
  		forward compass -m compassReq : compassReq(0) 
	}Transition t0 whenMsg compassRes -> handleCompassRes
		
	State handleCompassRes{
		onMsg( compassRes : compassRes(ORIENTATION) ) {
			["Orientation = payloadArg(0).toLong()"]			
		}
		["
			 Abs = Math.abs(OrientationZero-Orientation)
			 NeedRotate = Abs>ErroreConcesso
		"]
		//println("handleCompassRes--------------->Abs[$Abs] Orientation[$Orientation]")
	}Goto miniRotate if "NeedRotate" else endDoRotationForward
	
	  State miniRotate{
				["
					var temp_d =0L
					var temp_a =0L	
				"]
			if"Orientation>OrientationZero"{
				["
					temp_a =Orientation-OrientationZero
					temp_d =360-temp_a			
				"]
			}else{
				["
					temp_d =OrientationZero-Orientation
					temp_a =360-temp_d			
				"]
			}
			["var Arotate=true"]
			if"temp_a>temp_d"{
				["Arotate=false"]
			}
			println("Arotate[$Arotate], ActualOrientation[$Orientation], needOrientation[$OrientationZero]")
			if"Arotate"{
					//forward mindrobot -m local_modelChanged : modelChanged(robot, a)
					forward resourcemodel -m modelChange : modelChange(robot,ma)	  				  		
			}else{
					//forward mindrobot -m local_modelChanged : modelChanged(robot, d)
					forward resourcemodel -m modelChange : modelChange(robot,md)	  			  		
			}
	  		delayVar RotateTime
	  		//forward mindrobot -m local_modelChanged : modelChanged(robot, h)
	  		forward resourcemodel -m modelChange : modelChange(robot,h)					
	  }Goto correggi
	  

	State endDoRotationForward{
		//Rotation ok quindi salvo sulla kb
		if "RealMove==\"a\""{
	  		forward kb -m modelUpdate : modelUpdate(  robot,  a)
	  	}
		if "RealMove==\"d\""{
			forward kb -m modelUpdate : modelUpdate(  robot, d)
		}  		
		["replyToCaller(\"rotationOk\", \"rotationOk(0)\")"]
	}
	Goto ready
	
	
}

QActor onecellforward context ctxRobot {
	["
		var FoundObstacle = false
		var StepTime = 0L
		var Duration : Long =0
		var DistanzaMinima :Long =10
	"]  
	State s0 initial {	   		
		println("Start onecellforward")
	}Goto ready
	
	State ready{
	}Transition t0 whenMsg onestep -> checkFirst
	
	State checkFirst{
		 println("---------->checkFirst")
		["
			storeCurrentMessageForReply()
			FoundObstacle = false 
		"]		
		onMsg( onestep : onestep( TIME ) ) {
			["StepTime = payloadArg(0).toLong()"]
		}
		forward sonarhandler -m internalReq : internalReq(lastSonarRobot)
			println ("----------------WAITING")
	}Transition t0 whenEvent lastSonarRobot  -> waitingForcheckFirstSonar
	
	State waitingForcheckFirstSonar{
		 println("---------->waitingForcheckFirstSonar")
		onMsg ( lastSonarRobot : lastSonarRobot( DISTANCE ) ){     
			["var distance = Integer.parseInt( payloadArg(0) ) 
              FoundObstacle = (distance<DistanzaMinima/2) "] 
               if"FoundObstacle"{
              	  ["replyToCaller(\"stepFail\", \"stepFail(obstacle,$distance) \")"]
				println("Actor: OneStepForward; State:cantDoOneStep")	
              }else{
              	
              	println("Actor: OneStepForward; State: OK-> $distance")	
              }
              
              
   		}
	}Goto ready if "FoundObstacle" else doMoveForward

	State doMoveForward{		  
			println("-->doMoveForward")
			//["startTimer()"] <<<<<-----------------NON VA
			//forward mindrobot -m local_modelChanged : modelChanged(robot, w)
			forward resourcemodel -m modelChange : modelChange(robot,w)	  			
			forward timer -m setTimer : setTimer( $StepTime )			
			run itunibo.planner.plannerUtil.startTimer()
	} 
	Transition t0
		whenEvent tickTimer  -> endDoMoveForward	
		whenEvent sonarRobot  -> handleSonarRobot	
  
	State endDoMoveForward{
		println("---------------------------OK----->endDoMoveForward")
		//forward mindrobot -m local_modelChanged : modelChanged(robot,h)		
		forward resourcemodel -m modelChange : modelChange(robot,h)
		//setp in avanti ok quindi salvo sulla kb
		forward kb -m modelUpdate : modelUpdate(  robot,  w)  
		//aggiusto la rotta
		forward onerotateforward -m onerotationstep : onerotationstep(Z) 
		
	}Transition t0 whenEvent rotationOk  -> endCorrezioneRotta	
	
	State endCorrezioneRotta{
			["replyToCaller(\"stepOk\", \"stepOk(ok)\")"]		
	}Goto ready
	
	//Substitute with an ad-hoc actor for a real robot
	State handleSonarRobot{  //before than the step time
		//printCurrentMessage		
		
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){     
			["val distance = Integer.parseInt( payloadArg(0) ) 
              FoundObstacle = (distance<DistanzaMinima) "]  
              if "FoundObstacle"{
	 			run itunibo.planner.moveUtils.setDuration(myself)
              }
              
              println("handleSonarRobot-ONESTEP--------------------------------------------->$distance")
   		}
	}	
	Goto stepFail if "FoundObstacle" else mustGoOn
	
	State stepFail{
		forward timer -m resetTimer : resetTimer( reset )						
		//forward mindrobot -m local_modelChanged : modelChanged(robot,h)		
		forward resourcemodel -m modelChange : modelChange(robot,h)
		solve( wduration( TIME ) )
		//["Duration=getDuration()"]
		["Duration=getCurSol(\"TIME\").toString().toLong()"]		
		//println("Actor: OneStepForward; State:stepfail -> $Duration")		
			 	
	}Goto goBackFromFail
	
	State goBackFromFail{
	
 		forward resourcemodel -m modelChange : modelChange(robot,s)  
 		delayVar Duration 
  		forward resourcemodel -m modelChange : modelChange(robot,h) 
  		
		["replyToCaller(\"stepFail\", \"stepFail(obstacle,$Duration) \")"]
		
	}Goto ready
	
	State mustGoOn{
		      println("->mustGoOn")
   		
	}
	Transition t0 whenEvent tickTimer  -> endDoMoveForward	
					whenEvent sonarRobot  -> handleSonarRobot	
}

QActor timer context ctxRobot {
	["var ActualTimer = 0L "]
	State s0 initial {	   
		println("Start timer") 
	}Goto ready
	
	State ready{
		  
		["ActualTimer = 0L "]
		}Transition t0 whenMsg setTimer -> start
	
	State start{
		onMsg( setTimer : setTimer( DURATION ) ) {
			["ActualTimer = payloadArg(0).toLong()"]
		}
	}Transition t0 whenTimeVar  ActualTimer -> drinnn	
					whenEvent resetTimer  -> ready
					
	State drinnn{
		forward onecellforward -m tickTimer : tickTimer(ok) 
	}
	Goto ready
	
}

QActor leds context ctxRobot {
	["
		var ActualCont : Long =0
		var BlinkDelay : Long = 0
		var BlinkNumber : Long = 0
		val MinBlinkingDelay : Long = 50
		var NeedBlink =false
		val OnTiming :Long = 50 
	"]
	State s0 initial {	
		println("Start leds")   
		run surpluss.ledManagerSupport.instance()
		delay 10
		run surpluss.ledManagerSupport.frontLedOn()
		delay 1000
		run surpluss.ledManagerSupport.frontLedOff()
		//in futuro qui in attesa del messaggio di start
	}Goto waitingForCMD
	
	State waitingForCMD{
		
	}Transition t0 whenEvent  setLed -> handleSetLed
					
	State handleSetLed{
		["NeedBlink = true"]
		onMsg( setLed : setLed(BLINKN,BLINKDELAY ) ) {
			["
				ActualCont=0
				BlinkNumber = payloadArg(0).toLong()
				BlinkDelay  = payloadArg(1).toLong()
			"]
			if "BlinkDelay<0 || BlinkNumber<0"{
				run surpluss.ledManagerSupport.frontLedOff()
				["NeedBlink = false"]
			}
			if "BlinkDelay>=0 && BlinkDelay<MinBlinkingDelay"{
				run surpluss.ledManagerSupport.frontLedOn()	
				["NeedBlink = false"]		
			}
		}
	}Goto blinkOn if "NeedBlink" else waitingForCMD
	
	State blinkOn{
		run surpluss.ledManagerSupport.frontLedOn()
		["ActualCont=ActualCont+1"]	
		
	}Transition t0 whenTimeVar OnTiming -> blinkOff
	
	State blinkOff{
		run surpluss.ledManagerSupport.frontLedOff()
		["NeedBlink = (ActualCont<BlinkNumber)"]
	}	
	Goto needBlinkAgain if "NeedBlink" else waitingForCMD
			
	State needBlinkAgain{
		
	}Transition t0 whenTimeVar BlinkDelay -> blinkOn
					//whenEvent  setLed -> handleSetLed
	
}

QActor realforntsonar context ctxRobot{
	["	
		var ActualTimer : Long = 80
	"]
	State s0 initial {	
		run surpluss.pollingSonar.instance()
		println("Start realSonar") 
	}
	Transition t0  whenTimeVar  ActualTimer -> doNotifyAll
	
	State doNotifyAll{
		["val Distance = surpluss.pollingSonar.askToSonar().toInt()"]
		if"Distance>0"{			
			emit sonarRobot : sonar($Distance)
			//println("------->$Distance")
		}
		
	}
	Transition t1  whenTimeVar  ActualTimer -> doNotifyAll
	
	
}

QActor reallateralsonar context ctxRobot{
	["	
		var ActualTimer : Long = 250
	"]
	State s0 initial {	
		run surpluss.pollingSonar.instance()
		println("Start realSonar") 
	}
	Transition t0  whenTimeVar  ActualTimer -> doNotifyAll
	
	State doNotifyAll{
		["val Distance_L = surpluss.pollingSonar.askToSonarLaterali(1).toInt()"]
		if"Distance_L>0"{			
			emit sonarLeft : sonarLeft($Distance_L)
		}
		["val Distance_R = surpluss.pollingSonar.askToSonarLaterali(0).toInt()"]
		if"Distance_R>0"{			
			emit sonarRigth : sonarRigth($Distance_R)
		}
	}
	Transition t1  whenTimeVar  ActualTimer -> doNotifyAll	
	
}

QActor compass context ctxRobot{

	State s0 initial {	
		run surpluss.compassSupport.instance()
		println("Start compass") 
		println("!!!!!!!! WARNING Compass waiting for calibration 2s !!!!!!!")
		delay 2000 
		println("!!!!!!!!!!!!!!! WARNING COMPASS CALIBRATION !!!!!!!!!!!!!!!") 		
	}
	Goto calibration
		
	State calibration{
		forward resourcemodel -m modelChange : modelChange(robot,sa) 
		//forward basicrobot -m robotCmd : robotCmd( sa)	
		delay 100
		 ["val calibration_x_y =surpluss.compassSupport.calibrateCompass()"]
		 //forward basicrobot -m robotCmd : robotCmd( h )	
		 	forward resourcemodel -m modelChange : modelChange(robot,h) 
		 println("Compass calibration done: $calibration_x_y") 
	}Transition t0  whenEvent compassReq  -> handleCompass
	
	State handleCompass{
		["storeCurrentMessageForReply()"]			
		onMsg ( compassReq : compassReq( V ) ){     
			["val Orientation = surpluss.compassSupport.askToCompass().toLong()"]
      		["replyToCaller(\"compassRes\", \"compassRes($Orientation)\")"]	
       }
	}
	Transition t1  whenEvent  compassReq -> handleCompass	
	
}
